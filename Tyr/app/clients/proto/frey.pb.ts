// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: proto/frey.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as protoAtoms from "./atoms.pb";

//========================================//
//                 Types                  //
//========================================//

export interface AuthRequestRegistrationPayload {
  email: string;
  title: string;
  password: string;
  sendEmail: boolean;
}

export interface AuthRequestRegistrationResponse {
  approvalCode: string;
}

export interface AuthApproveRegistrationPayload {
  approvalCode: string;
}

export interface AuthApproveRegistrationResponse {
  personId: number;
}

export interface AuthAuthorizePayload {
  email: string;
  password: string;
}

export interface AuthAuthorizeResponse {
  personId: number;
  authToken: string;
}

export interface AuthQuickAuthorizePayload {
  personId: number;
  authToken: string;
}

export interface AuthQuickAuthorizeResponse {
  authSuccess: boolean;
}

export interface AuthMePayload {
  personId: number;
  authToken: string;
}

export interface AuthMeResponse {
  personId: number;
  country: string;
  city: string;
  email: string;
  phone: string;
  tenhouId: string;
  title: string;
  groups: number[];
  hasAvatar: boolean;
  lastUpdate: string;
}

export interface AuthChangePasswordPayload {
  email: string;
  password: string;
  newPassword: string;
}

export interface AuthChangePasswordResponse {
  authToken: string;
}

export interface AuthRequestResetPasswordPayload {
  email: string;
  sendEmail: boolean;
}

export interface AuthRequestResetPasswordResponse {
  resetToken: string;
}

export interface AuthApproveResetPasswordPayload {
  email: string;
  resetToken: string;
}

export interface AuthApproveResetPasswordResponse {
  newTmpPassword: string;
}

export interface AccessGetAccessRulesPayload {
  personId: number;
  eventId: number;
}

export interface AccessGetAccessRulesResponse {
  rules: protoAtoms.AccessRules;
}

export interface AccessGetRuleValuePayload {
  personId: number;
  eventId: number;
  ruleName: string;
}

export interface AccessGetRuleValueResponse {
  value: protoAtoms.RuleValue;
}

export interface AccessGetEventAdminsPayload {
  eventId: number;
}

export interface AccessGetEventAdminsResponse {
  admins: protoAtoms.EventAdmin[];
}

export interface AccessGetSuperadminFlagPayload {
  personId: number;
}

export interface AccessGetSuperadminFlagResponse {
  isAdmin: boolean;
}

export interface AccessGetOwnedEventIdsPayload {
  personId: number;
}

export interface AccessGetOwnedEventIdsResponse {
  eventIds: number[];
}

export interface AccessGetRulesListPayload {}

export interface AccessGetRulesListResponse {
  items: protoAtoms.RuleListItem[];
}

export interface AccessGetAllEventRulesPayload {
  eventId: number;
}

export interface AccessGetAllEventRulesResponse {
  personRules: protoAtoms.EventRuleListItem[];
  groupRules: protoAtoms.EventRuleListItem[];
}

export interface AccessGetPersonAccessPayload {
  personId: number;
  eventId: number;
}

export interface AccessGetPersonAccessResponse {
  rules: protoAtoms.AccessRules;
}

export interface AccessGetGroupAccessPayload {
  groupId: number;
  eventId: number;
}

export interface AccessGetGroupAccessResponse {
  rules: protoAtoms.AccessRules;
}

export interface AccessGetAllPersonAccessPayload {
  personId: number;
}

export interface AccessGetAllPersonAccessResponse {
  rulesByEvent: Record<
    string,
    AccessGetAllPersonAccessResponse.RulesByEvent["value"] | undefined
  >;
}

export declare namespace AccessGetAllPersonAccessResponse {
  interface RulesByEvent {
    key: number;
    value: protoAtoms.RuleListItemExMap;
  }
}

export interface AccessGetAllGroupAccessPayload {
  groupId: number;
}

export interface AccessGetAllGroupAccessResponse {
  rulesByEvent: Record<
    string,
    AccessGetAllGroupAccessResponse.RulesByEvent["value"] | undefined
  >;
}

export declare namespace AccessGetAllGroupAccessResponse {
  interface RulesByEvent {
    key: number;
    value: protoAtoms.RuleListItemExMap;
  }
}

export interface AccessAddRuleForPersonPayload {
  ruleName: string;
  ruleValue: protoAtoms.RuleValue;
  ruleType: string;
  personId: number;
  eventId: number;
}

export interface AccessAddRuleForPersonResponse {
  ruleId: number;
}

export interface AccessAddRuleForGroupPayload {
  ruleName: string;
  ruleValue: protoAtoms.RuleValue;
  ruleType: string;
  groupId: number;
  eventId: number;
}

export interface AccessAddRuleForGroupResponse {
  ruleId: number;
}

export interface AccessUpdateRuleForPersonPayload {
  ruleId: number;
  ruleValue: protoAtoms.RuleValue;
  ruleType: string;
}

export interface AccessUpdateRuleForGroupPayload {
  ruleId: number;
  ruleValue: protoAtoms.RuleValue;
  ruleType: string;
}

export interface AccessDeleteRuleForPersonPayload {
  ruleId: number;
}

export interface AccessDeleteRuleForGroupPayload {
  ruleId: number;
}

export interface AccessClearAccessCachePayload {
  personId: number;
  eventId: number;
}

export interface AccessAddSystemWideRuleForPersonPayload {
  ruleName: string;
  ruleValue: protoAtoms.RuleValue;
  ruleType: string;
  personId: number;
}

export interface AccessAddSystemWideRuleForPersonResponse {
  ruleId: number;
}

export interface AccessAddSystemWideRuleForGroupPayload {
  ruleName: string;
  ruleValue: protoAtoms.RuleValue;
  ruleType: string;
  groupId: number;
}

export interface AccessAddSystemWideRuleForGroupResponse {
  ruleId: number;
}

export interface PersonsCreateAccountPayload {
  email: string;
  password: string;
  title: string;
  city: string;
  phone: string;
  tenhouId: string;
  country: string;
}

export interface PersonsCreateAccountResponse {
  personId: number;
}

export interface PersonsCreateGroupPayload {
  title: string;
  description: string;
  color: string;
}

export interface PersonsCreateGroupResponse {
  groupId: number;
}

export interface PersonsUpdateGroupPayload {
  groupId: number;
  title: string;
  description: string;
  color: string;
}

export interface PersonsDeleteGroupPayload {
  groupId: number;
}

export interface PersonsAddPersonToGroupPayload {
  personId: number;
  groupId: number;
}

export interface PersonsRemovePersonFromGroupPayload {
  personId: number;
  groupId: number;
}

export interface PersonsGetPersonsOfGroupPayload {
  groupId: number;
}

export interface PersonsGetPersonsOfGroupResponse {
  people: protoAtoms.Person[];
}

export interface PersonsGetGroupsOfPersonPayload {
  personId: number;
}

export interface PersonsGetGroupsOfPersonResponse {
  groups: protoAtoms.Group[];
}

export interface PersonsUpdatePersonalInfoPayload {
  id: number;
  title: string;
  country: string;
  city: string;
  email: string;
  phone: string;
  tenhouId: string;
  hasAvatar: boolean;
  avatarData: string;
}

export interface PersonsGetPersonalInfoPayload {
  ids: number[];
}

export interface PersonsGetPersonalInfoResponse {
  people: protoAtoms.PersonEx[];
}

export interface PersonsFindByTenhouIdsPayload {
  ids: string[];
}

export interface PersonsFindByTenhouIdsResponse {
  people: protoAtoms.PersonEx[];
}

export interface PersonsFindByTitlePayload {
  query: string;
}

export interface PersonsFindByTitleResponse {
  people: protoAtoms.Person[];
}

export interface PersonsGetGroupsPayload {
  ids: number[];
}

export interface PersonsGetGroupsResponse {
  groups: protoAtoms.Group[];
}

export interface DepersonalizePayload {}

//========================================//
//          Frey Protobuf Client          //
//========================================//

export async function RequestRegistration(
  authRequestRegistrationPayload: AuthRequestRegistrationPayload,
  config?: ClientConfiguration,
): Promise<AuthRequestRegistrationResponse> {
  const response = await PBrequest(
    "/common.Frey/RequestRegistration",
    AuthRequestRegistrationPayload.encode(authRequestRegistrationPayload),
    config,
  );
  return AuthRequestRegistrationResponse.decode(response);
}

export async function ApproveRegistration(
  authApproveRegistrationPayload: AuthApproveRegistrationPayload,
  config?: ClientConfiguration,
): Promise<AuthApproveRegistrationResponse> {
  const response = await PBrequest(
    "/common.Frey/ApproveRegistration",
    AuthApproveRegistrationPayload.encode(authApproveRegistrationPayload),
    config,
  );
  return AuthApproveRegistrationResponse.decode(response);
}

export async function Authorize(
  authAuthorizePayload: AuthAuthorizePayload,
  config?: ClientConfiguration,
): Promise<AuthAuthorizeResponse> {
  const response = await PBrequest(
    "/common.Frey/Authorize",
    AuthAuthorizePayload.encode(authAuthorizePayload),
    config,
  );
  return AuthAuthorizeResponse.decode(response);
}

export async function QuickAuthorize(
  authQuickAuthorizePayload: AuthQuickAuthorizePayload,
  config?: ClientConfiguration,
): Promise<AuthQuickAuthorizeResponse> {
  const response = await PBrequest(
    "/common.Frey/QuickAuthorize",
    AuthQuickAuthorizePayload.encode(authQuickAuthorizePayload),
    config,
  );
  return AuthQuickAuthorizeResponse.decode(response);
}

export async function Me(
  authMePayload: AuthMePayload,
  config?: ClientConfiguration,
): Promise<AuthMeResponse> {
  const response = await PBrequest(
    "/common.Frey/Me",
    AuthMePayload.encode(authMePayload),
    config,
  );
  return AuthMeResponse.decode(response);
}

export async function DepersonalizeAccount(
  depersonalizePayload: DepersonalizePayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/DepersonalizeAccount",
    DepersonalizePayload.encode(depersonalizePayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function ChangePassword(
  authChangePasswordPayload: AuthChangePasswordPayload,
  config?: ClientConfiguration,
): Promise<AuthChangePasswordResponse> {
  const response = await PBrequest(
    "/common.Frey/ChangePassword",
    AuthChangePasswordPayload.encode(authChangePasswordPayload),
    config,
  );
  return AuthChangePasswordResponse.decode(response);
}

export async function RequestResetPassword(
  authRequestResetPasswordPayload: AuthRequestResetPasswordPayload,
  config?: ClientConfiguration,
): Promise<AuthRequestResetPasswordResponse> {
  const response = await PBrequest(
    "/common.Frey/RequestResetPassword",
    AuthRequestResetPasswordPayload.encode(authRequestResetPasswordPayload),
    config,
  );
  return AuthRequestResetPasswordResponse.decode(response);
}

export async function ApproveResetPassword(
  authApproveResetPasswordPayload: AuthApproveResetPasswordPayload,
  config?: ClientConfiguration,
): Promise<AuthApproveResetPasswordResponse> {
  const response = await PBrequest(
    "/common.Frey/ApproveResetPassword",
    AuthApproveResetPasswordPayload.encode(authApproveResetPasswordPayload),
    config,
  );
  return AuthApproveResetPasswordResponse.decode(response);
}

export async function GetAccessRules(
  accessGetAccessRulesPayload: AccessGetAccessRulesPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAccessRulesResponse> {
  const response = await PBrequest(
    "/common.Frey/GetAccessRules",
    AccessGetAccessRulesPayload.encode(accessGetAccessRulesPayload),
    config,
  );
  return AccessGetAccessRulesResponse.decode(response);
}

export async function GetRuleValue(
  accessGetRuleValuePayload: AccessGetRuleValuePayload,
  config?: ClientConfiguration,
): Promise<AccessGetRuleValueResponse> {
  const response = await PBrequest(
    "/common.Frey/GetRuleValue",
    AccessGetRuleValuePayload.encode(accessGetRuleValuePayload),
    config,
  );
  return AccessGetRuleValueResponse.decode(response);
}

export async function UpdatePersonalInfo(
  personsUpdatePersonalInfoPayload: PersonsUpdatePersonalInfoPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/UpdatePersonalInfo",
    PersonsUpdatePersonalInfoPayload.encode(personsUpdatePersonalInfoPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function GetPersonalInfo(
  personsGetPersonalInfoPayload: PersonsGetPersonalInfoPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetPersonalInfoResponse> {
  const response = await PBrequest(
    "/common.Frey/GetPersonalInfo",
    PersonsGetPersonalInfoPayload.encode(personsGetPersonalInfoPayload),
    config,
  );
  return PersonsGetPersonalInfoResponse.decode(response);
}

export async function FindByTenhouIds(
  personsFindByTenhouIdsPayload: PersonsFindByTenhouIdsPayload,
  config?: ClientConfiguration,
): Promise<PersonsFindByTenhouIdsResponse> {
  const response = await PBrequest(
    "/common.Frey/FindByTenhouIds",
    PersonsFindByTenhouIdsPayload.encode(personsFindByTenhouIdsPayload),
    config,
  );
  return PersonsFindByTenhouIdsResponse.decode(response);
}

export async function FindByTitle(
  personsFindByTitlePayload: PersonsFindByTitlePayload,
  config?: ClientConfiguration,
): Promise<PersonsFindByTitleResponse> {
  const response = await PBrequest(
    "/common.Frey/FindByTitle",
    PersonsFindByTitlePayload.encode(personsFindByTitlePayload),
    config,
  );
  return PersonsFindByTitleResponse.decode(response);
}

export async function GetGroups(
  personsGetGroupsPayload: PersonsGetGroupsPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetGroupsResponse> {
  const response = await PBrequest(
    "/common.Frey/GetGroups",
    PersonsGetGroupsPayload.encode(personsGetGroupsPayload),
    config,
  );
  return PersonsGetGroupsResponse.decode(response);
}

export async function GetEventAdmins(
  accessGetEventAdminsPayload: AccessGetEventAdminsPayload,
  config?: ClientConfiguration,
): Promise<AccessGetEventAdminsResponse> {
  const response = await PBrequest(
    "/common.Frey/GetEventAdmins",
    AccessGetEventAdminsPayload.encode(accessGetEventAdminsPayload),
    config,
  );
  return AccessGetEventAdminsResponse.decode(response);
}

/**
 * admin
 */
export async function GetSuperadminFlag(
  accessGetSuperadminFlagPayload: AccessGetSuperadminFlagPayload,
  config?: ClientConfiguration,
): Promise<AccessGetSuperadminFlagResponse> {
  const response = await PBrequest(
    "/common.Frey/GetSuperadminFlag",
    AccessGetSuperadminFlagPayload.encode(accessGetSuperadminFlagPayload),
    config,
  );
  return AccessGetSuperadminFlagResponse.decode(response);
}

export async function GetOwnedEventIds(
  accessGetOwnedEventIdsPayload: AccessGetOwnedEventIdsPayload,
  config?: ClientConfiguration,
): Promise<AccessGetOwnedEventIdsResponse> {
  const response = await PBrequest(
    "/common.Frey/GetOwnedEventIds",
    AccessGetOwnedEventIdsPayload.encode(accessGetOwnedEventIdsPayload),
    config,
  );
  return AccessGetOwnedEventIdsResponse.decode(response);
}

export async function GetRulesList(
  accessGetRulesListPayload: AccessGetRulesListPayload,
  config?: ClientConfiguration,
): Promise<AccessGetRulesListResponse> {
  const response = await PBrequest(
    "/common.Frey/GetRulesList",
    AccessGetRulesListPayload.encode(accessGetRulesListPayload),
    config,
  );
  return AccessGetRulesListResponse.decode(response);
}

export async function GetAllEventRules(
  accessGetAllEventRulesPayload: AccessGetAllEventRulesPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAllEventRulesResponse> {
  const response = await PBrequest(
    "/common.Frey/GetAllEventRules",
    AccessGetAllEventRulesPayload.encode(accessGetAllEventRulesPayload),
    config,
  );
  return AccessGetAllEventRulesResponse.decode(response);
}

export async function GetPersonAccess(
  accessGetPersonAccessPayload: AccessGetPersonAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetPersonAccessResponse> {
  const response = await PBrequest(
    "/common.Frey/GetPersonAccess",
    AccessGetPersonAccessPayload.encode(accessGetPersonAccessPayload),
    config,
  );
  return AccessGetPersonAccessResponse.decode(response);
}

export async function GetGroupAccess(
  accessGetGroupAccessPayload: AccessGetGroupAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetGroupAccessResponse> {
  const response = await PBrequest(
    "/common.Frey/GetGroupAccess",
    AccessGetGroupAccessPayload.encode(accessGetGroupAccessPayload),
    config,
  );
  return AccessGetGroupAccessResponse.decode(response);
}

export async function GetAllPersonAccess(
  accessGetAllPersonAccessPayload: AccessGetAllPersonAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAllPersonAccessResponse> {
  const response = await PBrequest(
    "/common.Frey/GetAllPersonAccess",
    AccessGetAllPersonAccessPayload.encode(accessGetAllPersonAccessPayload),
    config,
  );
  return AccessGetAllPersonAccessResponse.decode(response);
}

export async function GetAllGroupAccess(
  accessGetAllGroupAccessPayload: AccessGetAllGroupAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAllGroupAccessResponse> {
  const response = await PBrequest(
    "/common.Frey/GetAllGroupAccess",
    AccessGetAllGroupAccessPayload.encode(accessGetAllGroupAccessPayload),
    config,
  );
  return AccessGetAllGroupAccessResponse.decode(response);
}

export async function AddRuleForPerson(
  accessAddRuleForPersonPayload: AccessAddRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<AccessAddRuleForPersonResponse> {
  const response = await PBrequest(
    "/common.Frey/AddRuleForPerson",
    AccessAddRuleForPersonPayload.encode(accessAddRuleForPersonPayload),
    config,
  );
  return AccessAddRuleForPersonResponse.decode(response);
}

export async function AddRuleForGroup(
  accessAddRuleForGroupPayload: AccessAddRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<AccessAddRuleForGroupResponse> {
  const response = await PBrequest(
    "/common.Frey/AddRuleForGroup",
    AccessAddRuleForGroupPayload.encode(accessAddRuleForGroupPayload),
    config,
  );
  return AccessAddRuleForGroupResponse.decode(response);
}

export async function UpdateRuleForPerson(
  accessUpdateRuleForPersonPayload: AccessUpdateRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/UpdateRuleForPerson",
    AccessUpdateRuleForPersonPayload.encode(accessUpdateRuleForPersonPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function UpdateRuleForGroup(
  accessUpdateRuleForGroupPayload: AccessUpdateRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/UpdateRuleForGroup",
    AccessUpdateRuleForGroupPayload.encode(accessUpdateRuleForGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function DeleteRuleForPerson(
  accessDeleteRuleForPersonPayload: AccessDeleteRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/DeleteRuleForPerson",
    AccessDeleteRuleForPersonPayload.encode(accessDeleteRuleForPersonPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function DeleteRuleForGroup(
  accessDeleteRuleForGroupPayload: AccessDeleteRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/DeleteRuleForGroup",
    AccessDeleteRuleForGroupPayload.encode(accessDeleteRuleForGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function ClearAccessCache(
  accessClearAccessCachePayload: AccessClearAccessCachePayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/ClearAccessCache",
    AccessClearAccessCachePayload.encode(accessClearAccessCachePayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function CreateAccount(
  personsCreateAccountPayload: PersonsCreateAccountPayload,
  config?: ClientConfiguration,
): Promise<PersonsCreateAccountResponse> {
  const response = await PBrequest(
    "/common.Frey/CreateAccount",
    PersonsCreateAccountPayload.encode(personsCreateAccountPayload),
    config,
  );
  return PersonsCreateAccountResponse.decode(response);
}

export async function CreateGroup(
  personsCreateGroupPayload: PersonsCreateGroupPayload,
  config?: ClientConfiguration,
): Promise<PersonsCreateGroupResponse> {
  const response = await PBrequest(
    "/common.Frey/CreateGroup",
    PersonsCreateGroupPayload.encode(personsCreateGroupPayload),
    config,
  );
  return PersonsCreateGroupResponse.decode(response);
}

export async function UpdateGroup(
  personsUpdateGroupPayload: PersonsUpdateGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/UpdateGroup",
    PersonsUpdateGroupPayload.encode(personsUpdateGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function DeleteGroup(
  personsDeleteGroupPayload: PersonsDeleteGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/DeleteGroup",
    PersonsDeleteGroupPayload.encode(personsDeleteGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function AddPersonToGroup(
  personsAddPersonToGroupPayload: PersonsAddPersonToGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/AddPersonToGroup",
    PersonsAddPersonToGroupPayload.encode(personsAddPersonToGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function RemovePersonFromGroup(
  personsRemovePersonFromGroupPayload: PersonsRemovePersonFromGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await PBrequest(
    "/common.Frey/RemovePersonFromGroup",
    PersonsRemovePersonFromGroupPayload.encode(
      personsRemovePersonFromGroupPayload,
    ),
    config,
  );
  return protoAtoms.GenericSuccessResponse.decode(response);
}

export async function GetPersonsOfGroup(
  personsGetPersonsOfGroupPayload: PersonsGetPersonsOfGroupPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetPersonsOfGroupResponse> {
  const response = await PBrequest(
    "/common.Frey/GetPersonsOfGroup",
    PersonsGetPersonsOfGroupPayload.encode(personsGetPersonsOfGroupPayload),
    config,
  );
  return PersonsGetPersonsOfGroupResponse.decode(response);
}

export async function GetGroupsOfPerson(
  personsGetGroupsOfPersonPayload: PersonsGetGroupsOfPersonPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetGroupsOfPersonResponse> {
  const response = await PBrequest(
    "/common.Frey/GetGroupsOfPerson",
    PersonsGetGroupsOfPersonPayload.encode(personsGetGroupsOfPersonPayload),
    config,
  );
  return PersonsGetGroupsOfPersonResponse.decode(response);
}

/**
 * superadmin: this should be covered with some
 * bootstrap authenthication, TODO
 */
export async function AddSystemWideRuleForPerson(
  accessAddSystemWideRuleForPersonPayload: AccessAddSystemWideRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<AccessAddSystemWideRuleForPersonResponse> {
  const response = await PBrequest(
    "/common.Frey/AddSystemWideRuleForPerson",
    AccessAddSystemWideRuleForPersonPayload.encode(
      accessAddSystemWideRuleForPersonPayload,
    ),
    config,
  );
  return AccessAddSystemWideRuleForPersonResponse.decode(response);
}

export async function AddSystemWideRuleForGroup(
  accessAddSystemWideRuleForGroupPayload: AccessAddSystemWideRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<AccessAddSystemWideRuleForGroupResponse> {
  const response = await PBrequest(
    "/common.Frey/AddSystemWideRuleForGroup",
    AccessAddSystemWideRuleForGroupPayload.encode(
      accessAddSystemWideRuleForGroupPayload,
    ),
    config,
  );
  return AccessAddSystemWideRuleForGroupResponse.decode(response);
}

//========================================//
//            Frey JSON Client            //
//========================================//

export async function RequestRegistrationJSON(
  authRequestRegistrationPayload: AuthRequestRegistrationPayload,
  config?: ClientConfiguration,
): Promise<AuthRequestRegistrationResponse> {
  const response = await JSONrequest(
    "/common.Frey/RequestRegistration",
    AuthRequestRegistrationPayloadJSON.encode(authRequestRegistrationPayload),
    config,
  );
  return AuthRequestRegistrationResponseJSON.decode(response);
}

export async function ApproveRegistrationJSON(
  authApproveRegistrationPayload: AuthApproveRegistrationPayload,
  config?: ClientConfiguration,
): Promise<AuthApproveRegistrationResponse> {
  const response = await JSONrequest(
    "/common.Frey/ApproveRegistration",
    AuthApproveRegistrationPayloadJSON.encode(authApproveRegistrationPayload),
    config,
  );
  return AuthApproveRegistrationResponseJSON.decode(response);
}

export async function AuthorizeJSON(
  authAuthorizePayload: AuthAuthorizePayload,
  config?: ClientConfiguration,
): Promise<AuthAuthorizeResponse> {
  const response = await JSONrequest(
    "/common.Frey/Authorize",
    AuthAuthorizePayloadJSON.encode(authAuthorizePayload),
    config,
  );
  return AuthAuthorizeResponseJSON.decode(response);
}

export async function QuickAuthorizeJSON(
  authQuickAuthorizePayload: AuthQuickAuthorizePayload,
  config?: ClientConfiguration,
): Promise<AuthQuickAuthorizeResponse> {
  const response = await JSONrequest(
    "/common.Frey/QuickAuthorize",
    AuthQuickAuthorizePayloadJSON.encode(authQuickAuthorizePayload),
    config,
  );
  return AuthQuickAuthorizeResponseJSON.decode(response);
}

export async function MeJSON(
  authMePayload: AuthMePayload,
  config?: ClientConfiguration,
): Promise<AuthMeResponse> {
  const response = await JSONrequest(
    "/common.Frey/Me",
    AuthMePayloadJSON.encode(authMePayload),
    config,
  );
  return AuthMeResponseJSON.decode(response);
}

export async function DepersonalizeAccountJSON(
  depersonalizePayload: DepersonalizePayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/DepersonalizeAccount",
    DepersonalizePayloadJSON.encode(depersonalizePayload),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function ChangePasswordJSON(
  authChangePasswordPayload: AuthChangePasswordPayload,
  config?: ClientConfiguration,
): Promise<AuthChangePasswordResponse> {
  const response = await JSONrequest(
    "/common.Frey/ChangePassword",
    AuthChangePasswordPayloadJSON.encode(authChangePasswordPayload),
    config,
  );
  return AuthChangePasswordResponseJSON.decode(response);
}

export async function RequestResetPasswordJSON(
  authRequestResetPasswordPayload: AuthRequestResetPasswordPayload,
  config?: ClientConfiguration,
): Promise<AuthRequestResetPasswordResponse> {
  const response = await JSONrequest(
    "/common.Frey/RequestResetPassword",
    AuthRequestResetPasswordPayloadJSON.encode(authRequestResetPasswordPayload),
    config,
  );
  return AuthRequestResetPasswordResponseJSON.decode(response);
}

export async function ApproveResetPasswordJSON(
  authApproveResetPasswordPayload: AuthApproveResetPasswordPayload,
  config?: ClientConfiguration,
): Promise<AuthApproveResetPasswordResponse> {
  const response = await JSONrequest(
    "/common.Frey/ApproveResetPassword",
    AuthApproveResetPasswordPayloadJSON.encode(authApproveResetPasswordPayload),
    config,
  );
  return AuthApproveResetPasswordResponseJSON.decode(response);
}

export async function GetAccessRulesJSON(
  accessGetAccessRulesPayload: AccessGetAccessRulesPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAccessRulesResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetAccessRules",
    AccessGetAccessRulesPayloadJSON.encode(accessGetAccessRulesPayload),
    config,
  );
  return AccessGetAccessRulesResponseJSON.decode(response);
}

export async function GetRuleValueJSON(
  accessGetRuleValuePayload: AccessGetRuleValuePayload,
  config?: ClientConfiguration,
): Promise<AccessGetRuleValueResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetRuleValue",
    AccessGetRuleValuePayloadJSON.encode(accessGetRuleValuePayload),
    config,
  );
  return AccessGetRuleValueResponseJSON.decode(response);
}

export async function UpdatePersonalInfoJSON(
  personsUpdatePersonalInfoPayload: PersonsUpdatePersonalInfoPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/UpdatePersonalInfo",
    PersonsUpdatePersonalInfoPayloadJSON.encode(
      personsUpdatePersonalInfoPayload,
    ),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function GetPersonalInfoJSON(
  personsGetPersonalInfoPayload: PersonsGetPersonalInfoPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetPersonalInfoResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetPersonalInfo",
    PersonsGetPersonalInfoPayloadJSON.encode(personsGetPersonalInfoPayload),
    config,
  );
  return PersonsGetPersonalInfoResponseJSON.decode(response);
}

export async function FindByTenhouIdsJSON(
  personsFindByTenhouIdsPayload: PersonsFindByTenhouIdsPayload,
  config?: ClientConfiguration,
): Promise<PersonsFindByTenhouIdsResponse> {
  const response = await JSONrequest(
    "/common.Frey/FindByTenhouIds",
    PersonsFindByTenhouIdsPayloadJSON.encode(personsFindByTenhouIdsPayload),
    config,
  );
  return PersonsFindByTenhouIdsResponseJSON.decode(response);
}

export async function FindByTitleJSON(
  personsFindByTitlePayload: PersonsFindByTitlePayload,
  config?: ClientConfiguration,
): Promise<PersonsFindByTitleResponse> {
  const response = await JSONrequest(
    "/common.Frey/FindByTitle",
    PersonsFindByTitlePayloadJSON.encode(personsFindByTitlePayload),
    config,
  );
  return PersonsFindByTitleResponseJSON.decode(response);
}

export async function GetGroupsJSON(
  personsGetGroupsPayload: PersonsGetGroupsPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetGroupsResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetGroups",
    PersonsGetGroupsPayloadJSON.encode(personsGetGroupsPayload),
    config,
  );
  return PersonsGetGroupsResponseJSON.decode(response);
}

export async function GetEventAdminsJSON(
  accessGetEventAdminsPayload: AccessGetEventAdminsPayload,
  config?: ClientConfiguration,
): Promise<AccessGetEventAdminsResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetEventAdmins",
    AccessGetEventAdminsPayloadJSON.encode(accessGetEventAdminsPayload),
    config,
  );
  return AccessGetEventAdminsResponseJSON.decode(response);
}

/**
 * admin
 */
export async function GetSuperadminFlagJSON(
  accessGetSuperadminFlagPayload: AccessGetSuperadminFlagPayload,
  config?: ClientConfiguration,
): Promise<AccessGetSuperadminFlagResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetSuperadminFlag",
    AccessGetSuperadminFlagPayloadJSON.encode(accessGetSuperadminFlagPayload),
    config,
  );
  return AccessGetSuperadminFlagResponseJSON.decode(response);
}

export async function GetOwnedEventIdsJSON(
  accessGetOwnedEventIdsPayload: AccessGetOwnedEventIdsPayload,
  config?: ClientConfiguration,
): Promise<AccessGetOwnedEventIdsResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetOwnedEventIds",
    AccessGetOwnedEventIdsPayloadJSON.encode(accessGetOwnedEventIdsPayload),
    config,
  );
  return AccessGetOwnedEventIdsResponseJSON.decode(response);
}

export async function GetRulesListJSON(
  accessGetRulesListPayload: AccessGetRulesListPayload,
  config?: ClientConfiguration,
): Promise<AccessGetRulesListResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetRulesList",
    AccessGetRulesListPayloadJSON.encode(accessGetRulesListPayload),
    config,
  );
  return AccessGetRulesListResponseJSON.decode(response);
}

export async function GetAllEventRulesJSON(
  accessGetAllEventRulesPayload: AccessGetAllEventRulesPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAllEventRulesResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetAllEventRules",
    AccessGetAllEventRulesPayloadJSON.encode(accessGetAllEventRulesPayload),
    config,
  );
  return AccessGetAllEventRulesResponseJSON.decode(response);
}

export async function GetPersonAccessJSON(
  accessGetPersonAccessPayload: AccessGetPersonAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetPersonAccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetPersonAccess",
    AccessGetPersonAccessPayloadJSON.encode(accessGetPersonAccessPayload),
    config,
  );
  return AccessGetPersonAccessResponseJSON.decode(response);
}

export async function GetGroupAccessJSON(
  accessGetGroupAccessPayload: AccessGetGroupAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetGroupAccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetGroupAccess",
    AccessGetGroupAccessPayloadJSON.encode(accessGetGroupAccessPayload),
    config,
  );
  return AccessGetGroupAccessResponseJSON.decode(response);
}

export async function GetAllPersonAccessJSON(
  accessGetAllPersonAccessPayload: AccessGetAllPersonAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAllPersonAccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetAllPersonAccess",
    AccessGetAllPersonAccessPayloadJSON.encode(accessGetAllPersonAccessPayload),
    config,
  );
  return AccessGetAllPersonAccessResponseJSON.decode(response);
}

export async function GetAllGroupAccessJSON(
  accessGetAllGroupAccessPayload: AccessGetAllGroupAccessPayload,
  config?: ClientConfiguration,
): Promise<AccessGetAllGroupAccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetAllGroupAccess",
    AccessGetAllGroupAccessPayloadJSON.encode(accessGetAllGroupAccessPayload),
    config,
  );
  return AccessGetAllGroupAccessResponseJSON.decode(response);
}

export async function AddRuleForPersonJSON(
  accessAddRuleForPersonPayload: AccessAddRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<AccessAddRuleForPersonResponse> {
  const response = await JSONrequest(
    "/common.Frey/AddRuleForPerson",
    AccessAddRuleForPersonPayloadJSON.encode(accessAddRuleForPersonPayload),
    config,
  );
  return AccessAddRuleForPersonResponseJSON.decode(response);
}

export async function AddRuleForGroupJSON(
  accessAddRuleForGroupPayload: AccessAddRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<AccessAddRuleForGroupResponse> {
  const response = await JSONrequest(
    "/common.Frey/AddRuleForGroup",
    AccessAddRuleForGroupPayloadJSON.encode(accessAddRuleForGroupPayload),
    config,
  );
  return AccessAddRuleForGroupResponseJSON.decode(response);
}

export async function UpdateRuleForPersonJSON(
  accessUpdateRuleForPersonPayload: AccessUpdateRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/UpdateRuleForPerson",
    AccessUpdateRuleForPersonPayloadJSON.encode(
      accessUpdateRuleForPersonPayload,
    ),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function UpdateRuleForGroupJSON(
  accessUpdateRuleForGroupPayload: AccessUpdateRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/UpdateRuleForGroup",
    AccessUpdateRuleForGroupPayloadJSON.encode(accessUpdateRuleForGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function DeleteRuleForPersonJSON(
  accessDeleteRuleForPersonPayload: AccessDeleteRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/DeleteRuleForPerson",
    AccessDeleteRuleForPersonPayloadJSON.encode(
      accessDeleteRuleForPersonPayload,
    ),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function DeleteRuleForGroupJSON(
  accessDeleteRuleForGroupPayload: AccessDeleteRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/DeleteRuleForGroup",
    AccessDeleteRuleForGroupPayloadJSON.encode(accessDeleteRuleForGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function ClearAccessCacheJSON(
  accessClearAccessCachePayload: AccessClearAccessCachePayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/ClearAccessCache",
    AccessClearAccessCachePayloadJSON.encode(accessClearAccessCachePayload),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function CreateAccountJSON(
  personsCreateAccountPayload: PersonsCreateAccountPayload,
  config?: ClientConfiguration,
): Promise<PersonsCreateAccountResponse> {
  const response = await JSONrequest(
    "/common.Frey/CreateAccount",
    PersonsCreateAccountPayloadJSON.encode(personsCreateAccountPayload),
    config,
  );
  return PersonsCreateAccountResponseJSON.decode(response);
}

export async function CreateGroupJSON(
  personsCreateGroupPayload: PersonsCreateGroupPayload,
  config?: ClientConfiguration,
): Promise<PersonsCreateGroupResponse> {
  const response = await JSONrequest(
    "/common.Frey/CreateGroup",
    PersonsCreateGroupPayloadJSON.encode(personsCreateGroupPayload),
    config,
  );
  return PersonsCreateGroupResponseJSON.decode(response);
}

export async function UpdateGroupJSON(
  personsUpdateGroupPayload: PersonsUpdateGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/UpdateGroup",
    PersonsUpdateGroupPayloadJSON.encode(personsUpdateGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function DeleteGroupJSON(
  personsDeleteGroupPayload: PersonsDeleteGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/DeleteGroup",
    PersonsDeleteGroupPayloadJSON.encode(personsDeleteGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function AddPersonToGroupJSON(
  personsAddPersonToGroupPayload: PersonsAddPersonToGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/AddPersonToGroup",
    PersonsAddPersonToGroupPayloadJSON.encode(personsAddPersonToGroupPayload),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function RemovePersonFromGroupJSON(
  personsRemovePersonFromGroupPayload: PersonsRemovePersonFromGroupPayload,
  config?: ClientConfiguration,
): Promise<protoAtoms.GenericSuccessResponse> {
  const response = await JSONrequest(
    "/common.Frey/RemovePersonFromGroup",
    PersonsRemovePersonFromGroupPayloadJSON.encode(
      personsRemovePersonFromGroupPayload,
    ),
    config,
  );
  return protoAtoms.GenericSuccessResponseJSON.decode(response);
}

export async function GetPersonsOfGroupJSON(
  personsGetPersonsOfGroupPayload: PersonsGetPersonsOfGroupPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetPersonsOfGroupResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetPersonsOfGroup",
    PersonsGetPersonsOfGroupPayloadJSON.encode(personsGetPersonsOfGroupPayload),
    config,
  );
  return PersonsGetPersonsOfGroupResponseJSON.decode(response);
}

export async function GetGroupsOfPersonJSON(
  personsGetGroupsOfPersonPayload: PersonsGetGroupsOfPersonPayload,
  config?: ClientConfiguration,
): Promise<PersonsGetGroupsOfPersonResponse> {
  const response = await JSONrequest(
    "/common.Frey/GetGroupsOfPerson",
    PersonsGetGroupsOfPersonPayloadJSON.encode(personsGetGroupsOfPersonPayload),
    config,
  );
  return PersonsGetGroupsOfPersonResponseJSON.decode(response);
}

/**
 * superadmin: this should be covered with some
 * bootstrap authenthication, TODO
 */
export async function AddSystemWideRuleForPersonJSON(
  accessAddSystemWideRuleForPersonPayload: AccessAddSystemWideRuleForPersonPayload,
  config?: ClientConfiguration,
): Promise<AccessAddSystemWideRuleForPersonResponse> {
  const response = await JSONrequest(
    "/common.Frey/AddSystemWideRuleForPerson",
    AccessAddSystemWideRuleForPersonPayloadJSON.encode(
      accessAddSystemWideRuleForPersonPayload,
    ),
    config,
  );
  return AccessAddSystemWideRuleForPersonResponseJSON.decode(response);
}

export async function AddSystemWideRuleForGroupJSON(
  accessAddSystemWideRuleForGroupPayload: AccessAddSystemWideRuleForGroupPayload,
  config?: ClientConfiguration,
): Promise<AccessAddSystemWideRuleForGroupResponse> {
  const response = await JSONrequest(
    "/common.Frey/AddSystemWideRuleForGroup",
    AccessAddSystemWideRuleForGroupPayloadJSON.encode(
      accessAddSystemWideRuleForGroupPayload,
    ),
    config,
  );
  return AccessAddSystemWideRuleForGroupResponseJSON.decode(response);
}

//========================================//
//                  Frey                  //
//========================================//

export interface Frey<Context = unknown> {
  RequestRegistration: (
    authRequestRegistrationPayload: AuthRequestRegistrationPayload,
    context: Context,
  ) =>
    | Promise<AuthRequestRegistrationResponse>
    | AuthRequestRegistrationResponse;
  ApproveRegistration: (
    authApproveRegistrationPayload: AuthApproveRegistrationPayload,
    context: Context,
  ) =>
    | Promise<AuthApproveRegistrationResponse>
    | AuthApproveRegistrationResponse;
  Authorize: (
    authAuthorizePayload: AuthAuthorizePayload,
    context: Context,
  ) => Promise<AuthAuthorizeResponse> | AuthAuthorizeResponse;
  QuickAuthorize: (
    authQuickAuthorizePayload: AuthQuickAuthorizePayload,
    context: Context,
  ) => Promise<AuthQuickAuthorizeResponse> | AuthQuickAuthorizeResponse;
  Me: (
    authMePayload: AuthMePayload,
    context: Context,
  ) => Promise<AuthMeResponse> | AuthMeResponse;
  DepersonalizeAccount: (
    depersonalizePayload: DepersonalizePayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  ChangePassword: (
    authChangePasswordPayload: AuthChangePasswordPayload,
    context: Context,
  ) => Promise<AuthChangePasswordResponse> | AuthChangePasswordResponse;
  RequestResetPassword: (
    authRequestResetPasswordPayload: AuthRequestResetPasswordPayload,
    context: Context,
  ) =>
    | Promise<AuthRequestResetPasswordResponse>
    | AuthRequestResetPasswordResponse;
  ApproveResetPassword: (
    authApproveResetPasswordPayload: AuthApproveResetPasswordPayload,
    context: Context,
  ) =>
    | Promise<AuthApproveResetPasswordResponse>
    | AuthApproveResetPasswordResponse;
  GetAccessRules: (
    accessGetAccessRulesPayload: AccessGetAccessRulesPayload,
    context: Context,
  ) => Promise<AccessGetAccessRulesResponse> | AccessGetAccessRulesResponse;
  GetRuleValue: (
    accessGetRuleValuePayload: AccessGetRuleValuePayload,
    context: Context,
  ) => Promise<AccessGetRuleValueResponse> | AccessGetRuleValueResponse;
  UpdatePersonalInfo: (
    personsUpdatePersonalInfoPayload: PersonsUpdatePersonalInfoPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  GetPersonalInfo: (
    personsGetPersonalInfoPayload: PersonsGetPersonalInfoPayload,
    context: Context,
  ) => Promise<PersonsGetPersonalInfoResponse> | PersonsGetPersonalInfoResponse;
  FindByTenhouIds: (
    personsFindByTenhouIdsPayload: PersonsFindByTenhouIdsPayload,
    context: Context,
  ) => Promise<PersonsFindByTenhouIdsResponse> | PersonsFindByTenhouIdsResponse;
  FindByTitle: (
    personsFindByTitlePayload: PersonsFindByTitlePayload,
    context: Context,
  ) => Promise<PersonsFindByTitleResponse> | PersonsFindByTitleResponse;
  GetGroups: (
    personsGetGroupsPayload: PersonsGetGroupsPayload,
    context: Context,
  ) => Promise<PersonsGetGroupsResponse> | PersonsGetGroupsResponse;
  GetEventAdmins: (
    accessGetEventAdminsPayload: AccessGetEventAdminsPayload,
    context: Context,
  ) => Promise<AccessGetEventAdminsResponse> | AccessGetEventAdminsResponse;
  /**
   * admin
   */
  GetSuperadminFlag: (
    accessGetSuperadminFlagPayload: AccessGetSuperadminFlagPayload,
    context: Context,
  ) =>
    | Promise<AccessGetSuperadminFlagResponse>
    | AccessGetSuperadminFlagResponse;
  GetOwnedEventIds: (
    accessGetOwnedEventIdsPayload: AccessGetOwnedEventIdsPayload,
    context: Context,
  ) => Promise<AccessGetOwnedEventIdsResponse> | AccessGetOwnedEventIdsResponse;
  GetRulesList: (
    accessGetRulesListPayload: AccessGetRulesListPayload,
    context: Context,
  ) => Promise<AccessGetRulesListResponse> | AccessGetRulesListResponse;
  GetAllEventRules: (
    accessGetAllEventRulesPayload: AccessGetAllEventRulesPayload,
    context: Context,
  ) => Promise<AccessGetAllEventRulesResponse> | AccessGetAllEventRulesResponse;
  GetPersonAccess: (
    accessGetPersonAccessPayload: AccessGetPersonAccessPayload,
    context: Context,
  ) => Promise<AccessGetPersonAccessResponse> | AccessGetPersonAccessResponse;
  GetGroupAccess: (
    accessGetGroupAccessPayload: AccessGetGroupAccessPayload,
    context: Context,
  ) => Promise<AccessGetGroupAccessResponse> | AccessGetGroupAccessResponse;
  GetAllPersonAccess: (
    accessGetAllPersonAccessPayload: AccessGetAllPersonAccessPayload,
    context: Context,
  ) =>
    | Promise<AccessGetAllPersonAccessResponse>
    | AccessGetAllPersonAccessResponse;
  GetAllGroupAccess: (
    accessGetAllGroupAccessPayload: AccessGetAllGroupAccessPayload,
    context: Context,
  ) =>
    | Promise<AccessGetAllGroupAccessResponse>
    | AccessGetAllGroupAccessResponse;
  AddRuleForPerson: (
    accessAddRuleForPersonPayload: AccessAddRuleForPersonPayload,
    context: Context,
  ) => Promise<AccessAddRuleForPersonResponse> | AccessAddRuleForPersonResponse;
  AddRuleForGroup: (
    accessAddRuleForGroupPayload: AccessAddRuleForGroupPayload,
    context: Context,
  ) => Promise<AccessAddRuleForGroupResponse> | AccessAddRuleForGroupResponse;
  UpdateRuleForPerson: (
    accessUpdateRuleForPersonPayload: AccessUpdateRuleForPersonPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  UpdateRuleForGroup: (
    accessUpdateRuleForGroupPayload: AccessUpdateRuleForGroupPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  DeleteRuleForPerson: (
    accessDeleteRuleForPersonPayload: AccessDeleteRuleForPersonPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  DeleteRuleForGroup: (
    accessDeleteRuleForGroupPayload: AccessDeleteRuleForGroupPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  ClearAccessCache: (
    accessClearAccessCachePayload: AccessClearAccessCachePayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  CreateAccount: (
    personsCreateAccountPayload: PersonsCreateAccountPayload,
    context: Context,
  ) => Promise<PersonsCreateAccountResponse> | PersonsCreateAccountResponse;
  CreateGroup: (
    personsCreateGroupPayload: PersonsCreateGroupPayload,
    context: Context,
  ) => Promise<PersonsCreateGroupResponse> | PersonsCreateGroupResponse;
  UpdateGroup: (
    personsUpdateGroupPayload: PersonsUpdateGroupPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  DeleteGroup: (
    personsDeleteGroupPayload: PersonsDeleteGroupPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  AddPersonToGroup: (
    personsAddPersonToGroupPayload: PersonsAddPersonToGroupPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  RemovePersonFromGroup: (
    personsRemovePersonFromGroupPayload: PersonsRemovePersonFromGroupPayload,
    context: Context,
  ) =>
    | Promise<protoAtoms.GenericSuccessResponse>
    | protoAtoms.GenericSuccessResponse;
  GetPersonsOfGroup: (
    personsGetPersonsOfGroupPayload: PersonsGetPersonsOfGroupPayload,
    context: Context,
  ) =>
    | Promise<PersonsGetPersonsOfGroupResponse>
    | PersonsGetPersonsOfGroupResponse;
  GetGroupsOfPerson: (
    personsGetGroupsOfPersonPayload: PersonsGetGroupsOfPersonPayload,
    context: Context,
  ) =>
    | Promise<PersonsGetGroupsOfPersonResponse>
    | PersonsGetGroupsOfPersonResponse;
  /**
   * superadmin: this should be covered with some
   * bootstrap authenthication, TODO
   */
  AddSystemWideRuleForPerson: (
    accessAddSystemWideRuleForPersonPayload: AccessAddSystemWideRuleForPersonPayload,
    context: Context,
  ) =>
    | Promise<AccessAddSystemWideRuleForPersonResponse>
    | AccessAddSystemWideRuleForPersonResponse;
  AddSystemWideRuleForGroup: (
    accessAddSystemWideRuleForGroupPayload: AccessAddSystemWideRuleForGroupPayload,
    context: Context,
  ) =>
    | Promise<AccessAddSystemWideRuleForGroupResponse>
    | AccessAddSystemWideRuleForGroupResponse;
}

export function createFrey<Context>(service: Frey<Context>) {
  return {
    name: "common.Frey",
    methods: {
      RequestRegistration: {
        name: "RequestRegistration",
        handler: service.RequestRegistration,
        input: {
          protobuf: AuthRequestRegistrationPayload,
          json: AuthRequestRegistrationPayloadJSON,
        },
        output: {
          protobuf: AuthRequestRegistrationResponse,
          json: AuthRequestRegistrationResponseJSON,
        },
      },
      ApproveRegistration: {
        name: "ApproveRegistration",
        handler: service.ApproveRegistration,
        input: {
          protobuf: AuthApproveRegistrationPayload,
          json: AuthApproveRegistrationPayloadJSON,
        },
        output: {
          protobuf: AuthApproveRegistrationResponse,
          json: AuthApproveRegistrationResponseJSON,
        },
      },
      Authorize: {
        name: "Authorize",
        handler: service.Authorize,
        input: {
          protobuf: AuthAuthorizePayload,
          json: AuthAuthorizePayloadJSON,
        },
        output: {
          protobuf: AuthAuthorizeResponse,
          json: AuthAuthorizeResponseJSON,
        },
      },
      QuickAuthorize: {
        name: "QuickAuthorize",
        handler: service.QuickAuthorize,
        input: {
          protobuf: AuthQuickAuthorizePayload,
          json: AuthQuickAuthorizePayloadJSON,
        },
        output: {
          protobuf: AuthQuickAuthorizeResponse,
          json: AuthQuickAuthorizeResponseJSON,
        },
      },
      Me: {
        name: "Me",
        handler: service.Me,
        input: { protobuf: AuthMePayload, json: AuthMePayloadJSON },
        output: { protobuf: AuthMeResponse, json: AuthMeResponseJSON },
      },
      DepersonalizeAccount: {
        name: "DepersonalizeAccount",
        handler: service.DepersonalizeAccount,
        input: {
          protobuf: DepersonalizePayload,
          json: DepersonalizePayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      ChangePassword: {
        name: "ChangePassword",
        handler: service.ChangePassword,
        input: {
          protobuf: AuthChangePasswordPayload,
          json: AuthChangePasswordPayloadJSON,
        },
        output: {
          protobuf: AuthChangePasswordResponse,
          json: AuthChangePasswordResponseJSON,
        },
      },
      RequestResetPassword: {
        name: "RequestResetPassword",
        handler: service.RequestResetPassword,
        input: {
          protobuf: AuthRequestResetPasswordPayload,
          json: AuthRequestResetPasswordPayloadJSON,
        },
        output: {
          protobuf: AuthRequestResetPasswordResponse,
          json: AuthRequestResetPasswordResponseJSON,
        },
      },
      ApproveResetPassword: {
        name: "ApproveResetPassword",
        handler: service.ApproveResetPassword,
        input: {
          protobuf: AuthApproveResetPasswordPayload,
          json: AuthApproveResetPasswordPayloadJSON,
        },
        output: {
          protobuf: AuthApproveResetPasswordResponse,
          json: AuthApproveResetPasswordResponseJSON,
        },
      },
      GetAccessRules: {
        name: "GetAccessRules",
        handler: service.GetAccessRules,
        input: {
          protobuf: AccessGetAccessRulesPayload,
          json: AccessGetAccessRulesPayloadJSON,
        },
        output: {
          protobuf: AccessGetAccessRulesResponse,
          json: AccessGetAccessRulesResponseJSON,
        },
      },
      GetRuleValue: {
        name: "GetRuleValue",
        handler: service.GetRuleValue,
        input: {
          protobuf: AccessGetRuleValuePayload,
          json: AccessGetRuleValuePayloadJSON,
        },
        output: {
          protobuf: AccessGetRuleValueResponse,
          json: AccessGetRuleValueResponseJSON,
        },
      },
      UpdatePersonalInfo: {
        name: "UpdatePersonalInfo",
        handler: service.UpdatePersonalInfo,
        input: {
          protobuf: PersonsUpdatePersonalInfoPayload,
          json: PersonsUpdatePersonalInfoPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      GetPersonalInfo: {
        name: "GetPersonalInfo",
        handler: service.GetPersonalInfo,
        input: {
          protobuf: PersonsGetPersonalInfoPayload,
          json: PersonsGetPersonalInfoPayloadJSON,
        },
        output: {
          protobuf: PersonsGetPersonalInfoResponse,
          json: PersonsGetPersonalInfoResponseJSON,
        },
      },
      FindByTenhouIds: {
        name: "FindByTenhouIds",
        handler: service.FindByTenhouIds,
        input: {
          protobuf: PersonsFindByTenhouIdsPayload,
          json: PersonsFindByTenhouIdsPayloadJSON,
        },
        output: {
          protobuf: PersonsFindByTenhouIdsResponse,
          json: PersonsFindByTenhouIdsResponseJSON,
        },
      },
      FindByTitle: {
        name: "FindByTitle",
        handler: service.FindByTitle,
        input: {
          protobuf: PersonsFindByTitlePayload,
          json: PersonsFindByTitlePayloadJSON,
        },
        output: {
          protobuf: PersonsFindByTitleResponse,
          json: PersonsFindByTitleResponseJSON,
        },
      },
      GetGroups: {
        name: "GetGroups",
        handler: service.GetGroups,
        input: {
          protobuf: PersonsGetGroupsPayload,
          json: PersonsGetGroupsPayloadJSON,
        },
        output: {
          protobuf: PersonsGetGroupsResponse,
          json: PersonsGetGroupsResponseJSON,
        },
      },
      GetEventAdmins: {
        name: "GetEventAdmins",
        handler: service.GetEventAdmins,
        input: {
          protobuf: AccessGetEventAdminsPayload,
          json: AccessGetEventAdminsPayloadJSON,
        },
        output: {
          protobuf: AccessGetEventAdminsResponse,
          json: AccessGetEventAdminsResponseJSON,
        },
      },
      GetSuperadminFlag: {
        name: "GetSuperadminFlag",
        handler: service.GetSuperadminFlag,
        input: {
          protobuf: AccessGetSuperadminFlagPayload,
          json: AccessGetSuperadminFlagPayloadJSON,
        },
        output: {
          protobuf: AccessGetSuperadminFlagResponse,
          json: AccessGetSuperadminFlagResponseJSON,
        },
      },
      GetOwnedEventIds: {
        name: "GetOwnedEventIds",
        handler: service.GetOwnedEventIds,
        input: {
          protobuf: AccessGetOwnedEventIdsPayload,
          json: AccessGetOwnedEventIdsPayloadJSON,
        },
        output: {
          protobuf: AccessGetOwnedEventIdsResponse,
          json: AccessGetOwnedEventIdsResponseJSON,
        },
      },
      GetRulesList: {
        name: "GetRulesList",
        handler: service.GetRulesList,
        input: {
          protobuf: AccessGetRulesListPayload,
          json: AccessGetRulesListPayloadJSON,
        },
        output: {
          protobuf: AccessGetRulesListResponse,
          json: AccessGetRulesListResponseJSON,
        },
      },
      GetAllEventRules: {
        name: "GetAllEventRules",
        handler: service.GetAllEventRules,
        input: {
          protobuf: AccessGetAllEventRulesPayload,
          json: AccessGetAllEventRulesPayloadJSON,
        },
        output: {
          protobuf: AccessGetAllEventRulesResponse,
          json: AccessGetAllEventRulesResponseJSON,
        },
      },
      GetPersonAccess: {
        name: "GetPersonAccess",
        handler: service.GetPersonAccess,
        input: {
          protobuf: AccessGetPersonAccessPayload,
          json: AccessGetPersonAccessPayloadJSON,
        },
        output: {
          protobuf: AccessGetPersonAccessResponse,
          json: AccessGetPersonAccessResponseJSON,
        },
      },
      GetGroupAccess: {
        name: "GetGroupAccess",
        handler: service.GetGroupAccess,
        input: {
          protobuf: AccessGetGroupAccessPayload,
          json: AccessGetGroupAccessPayloadJSON,
        },
        output: {
          protobuf: AccessGetGroupAccessResponse,
          json: AccessGetGroupAccessResponseJSON,
        },
      },
      GetAllPersonAccess: {
        name: "GetAllPersonAccess",
        handler: service.GetAllPersonAccess,
        input: {
          protobuf: AccessGetAllPersonAccessPayload,
          json: AccessGetAllPersonAccessPayloadJSON,
        },
        output: {
          protobuf: AccessGetAllPersonAccessResponse,
          json: AccessGetAllPersonAccessResponseJSON,
        },
      },
      GetAllGroupAccess: {
        name: "GetAllGroupAccess",
        handler: service.GetAllGroupAccess,
        input: {
          protobuf: AccessGetAllGroupAccessPayload,
          json: AccessGetAllGroupAccessPayloadJSON,
        },
        output: {
          protobuf: AccessGetAllGroupAccessResponse,
          json: AccessGetAllGroupAccessResponseJSON,
        },
      },
      AddRuleForPerson: {
        name: "AddRuleForPerson",
        handler: service.AddRuleForPerson,
        input: {
          protobuf: AccessAddRuleForPersonPayload,
          json: AccessAddRuleForPersonPayloadJSON,
        },
        output: {
          protobuf: AccessAddRuleForPersonResponse,
          json: AccessAddRuleForPersonResponseJSON,
        },
      },
      AddRuleForGroup: {
        name: "AddRuleForGroup",
        handler: service.AddRuleForGroup,
        input: {
          protobuf: AccessAddRuleForGroupPayload,
          json: AccessAddRuleForGroupPayloadJSON,
        },
        output: {
          protobuf: AccessAddRuleForGroupResponse,
          json: AccessAddRuleForGroupResponseJSON,
        },
      },
      UpdateRuleForPerson: {
        name: "UpdateRuleForPerson",
        handler: service.UpdateRuleForPerson,
        input: {
          protobuf: AccessUpdateRuleForPersonPayload,
          json: AccessUpdateRuleForPersonPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      UpdateRuleForGroup: {
        name: "UpdateRuleForGroup",
        handler: service.UpdateRuleForGroup,
        input: {
          protobuf: AccessUpdateRuleForGroupPayload,
          json: AccessUpdateRuleForGroupPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      DeleteRuleForPerson: {
        name: "DeleteRuleForPerson",
        handler: service.DeleteRuleForPerson,
        input: {
          protobuf: AccessDeleteRuleForPersonPayload,
          json: AccessDeleteRuleForPersonPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      DeleteRuleForGroup: {
        name: "DeleteRuleForGroup",
        handler: service.DeleteRuleForGroup,
        input: {
          protobuf: AccessDeleteRuleForGroupPayload,
          json: AccessDeleteRuleForGroupPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      ClearAccessCache: {
        name: "ClearAccessCache",
        handler: service.ClearAccessCache,
        input: {
          protobuf: AccessClearAccessCachePayload,
          json: AccessClearAccessCachePayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      CreateAccount: {
        name: "CreateAccount",
        handler: service.CreateAccount,
        input: {
          protobuf: PersonsCreateAccountPayload,
          json: PersonsCreateAccountPayloadJSON,
        },
        output: {
          protobuf: PersonsCreateAccountResponse,
          json: PersonsCreateAccountResponseJSON,
        },
      },
      CreateGroup: {
        name: "CreateGroup",
        handler: service.CreateGroup,
        input: {
          protobuf: PersonsCreateGroupPayload,
          json: PersonsCreateGroupPayloadJSON,
        },
        output: {
          protobuf: PersonsCreateGroupResponse,
          json: PersonsCreateGroupResponseJSON,
        },
      },
      UpdateGroup: {
        name: "UpdateGroup",
        handler: service.UpdateGroup,
        input: {
          protobuf: PersonsUpdateGroupPayload,
          json: PersonsUpdateGroupPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      DeleteGroup: {
        name: "DeleteGroup",
        handler: service.DeleteGroup,
        input: {
          protobuf: PersonsDeleteGroupPayload,
          json: PersonsDeleteGroupPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      AddPersonToGroup: {
        name: "AddPersonToGroup",
        handler: service.AddPersonToGroup,
        input: {
          protobuf: PersonsAddPersonToGroupPayload,
          json: PersonsAddPersonToGroupPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      RemovePersonFromGroup: {
        name: "RemovePersonFromGroup",
        handler: service.RemovePersonFromGroup,
        input: {
          protobuf: PersonsRemovePersonFromGroupPayload,
          json: PersonsRemovePersonFromGroupPayloadJSON,
        },
        output: {
          protobuf: protoAtoms.GenericSuccessResponse,
          json: protoAtoms.GenericSuccessResponseJSON,
        },
      },
      GetPersonsOfGroup: {
        name: "GetPersonsOfGroup",
        handler: service.GetPersonsOfGroup,
        input: {
          protobuf: PersonsGetPersonsOfGroupPayload,
          json: PersonsGetPersonsOfGroupPayloadJSON,
        },
        output: {
          protobuf: PersonsGetPersonsOfGroupResponse,
          json: PersonsGetPersonsOfGroupResponseJSON,
        },
      },
      GetGroupsOfPerson: {
        name: "GetGroupsOfPerson",
        handler: service.GetGroupsOfPerson,
        input: {
          protobuf: PersonsGetGroupsOfPersonPayload,
          json: PersonsGetGroupsOfPersonPayloadJSON,
        },
        output: {
          protobuf: PersonsGetGroupsOfPersonResponse,
          json: PersonsGetGroupsOfPersonResponseJSON,
        },
      },
      AddSystemWideRuleForPerson: {
        name: "AddSystemWideRuleForPerson",
        handler: service.AddSystemWideRuleForPerson,
        input: {
          protobuf: AccessAddSystemWideRuleForPersonPayload,
          json: AccessAddSystemWideRuleForPersonPayloadJSON,
        },
        output: {
          protobuf: AccessAddSystemWideRuleForPersonResponse,
          json: AccessAddSystemWideRuleForPersonResponseJSON,
        },
      },
      AddSystemWideRuleForGroup: {
        name: "AddSystemWideRuleForGroup",
        handler: service.AddSystemWideRuleForGroup,
        input: {
          protobuf: AccessAddSystemWideRuleForGroupPayload,
          json: AccessAddSystemWideRuleForGroupPayloadJSON,
        },
        output: {
          protobuf: AccessAddSystemWideRuleForGroupResponse,
          json: AccessAddSystemWideRuleForGroupResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const AuthRequestRegistrationPayload = {
  /**
   * Serializes AuthRequestRegistrationPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthRequestRegistrationPayload>,
  ): Uint8Array {
    return AuthRequestRegistrationPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthRequestRegistrationPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthRequestRegistrationPayload {
    return AuthRequestRegistrationPayload._readMessage(
      AuthRequestRegistrationPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthRequestRegistrationPayload with all fields set to their default value.
   */
  initialize: function (): AuthRequestRegistrationPayload {
    return {
      email: "",
      title: "",
      password: "",
      sendEmail: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestRegistrationPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.password) {
      writer.writeString(3, msg.password);
    }
    if (msg.sendEmail) {
      writer.writeBool(4, msg.sendEmail);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestRegistrationPayload,
    reader: BinaryReader,
  ): AuthRequestRegistrationPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.password = reader.readString();
          break;
        }
        case 4: {
          msg.sendEmail = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthRequestRegistrationResponse = {
  /**
   * Serializes AuthRequestRegistrationResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthRequestRegistrationResponse>,
  ): Uint8Array {
    return AuthRequestRegistrationResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthRequestRegistrationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthRequestRegistrationResponse {
    return AuthRequestRegistrationResponse._readMessage(
      AuthRequestRegistrationResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthRequestRegistrationResponse with all fields set to their default value.
   */
  initialize: function (): AuthRequestRegistrationResponse {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestRegistrationResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.approvalCode) {
      writer.writeString(1, msg.approvalCode);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestRegistrationResponse,
    reader: BinaryReader,
  ): AuthRequestRegistrationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.approvalCode = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthApproveRegistrationPayload = {
  /**
   * Serializes AuthApproveRegistrationPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthApproveRegistrationPayload>,
  ): Uint8Array {
    return AuthApproveRegistrationPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthApproveRegistrationPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthApproveRegistrationPayload {
    return AuthApproveRegistrationPayload._readMessage(
      AuthApproveRegistrationPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthApproveRegistrationPayload with all fields set to their default value.
   */
  initialize: function (): AuthApproveRegistrationPayload {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveRegistrationPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.approvalCode) {
      writer.writeString(1, msg.approvalCode);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveRegistrationPayload,
    reader: BinaryReader,
  ): AuthApproveRegistrationPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.approvalCode = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthApproveRegistrationResponse = {
  /**
   * Serializes AuthApproveRegistrationResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthApproveRegistrationResponse>,
  ): Uint8Array {
    return AuthApproveRegistrationResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthApproveRegistrationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthApproveRegistrationResponse {
    return AuthApproveRegistrationResponse._readMessage(
      AuthApproveRegistrationResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthApproveRegistrationResponse with all fields set to their default value.
   */
  initialize: function (): AuthApproveRegistrationResponse {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveRegistrationResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveRegistrationResponse,
    reader: BinaryReader,
  ): AuthApproveRegistrationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthAuthorizePayload = {
  /**
   * Serializes AuthAuthorizePayload to protobuf.
   */
  encode: function (msg: PartialDeep<AuthAuthorizePayload>): Uint8Array {
    return AuthAuthorizePayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthAuthorizePayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthAuthorizePayload {
    return AuthAuthorizePayload._readMessage(
      AuthAuthorizePayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthAuthorizePayload with all fields set to their default value.
   */
  initialize: function (): AuthAuthorizePayload {
    return {
      email: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthAuthorizePayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthAuthorizePayload,
    reader: BinaryReader,
  ): AuthAuthorizePayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthAuthorizeResponse = {
  /**
   * Serializes AuthAuthorizeResponse to protobuf.
   */
  encode: function (msg: PartialDeep<AuthAuthorizeResponse>): Uint8Array {
    return AuthAuthorizeResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthAuthorizeResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthAuthorizeResponse {
    return AuthAuthorizeResponse._readMessage(
      AuthAuthorizeResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthAuthorizeResponse with all fields set to their default value.
   */
  initialize: function (): AuthAuthorizeResponse {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthAuthorizeResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.authToken) {
      writer.writeString(2, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthAuthorizeResponse,
    reader: BinaryReader,
  ): AuthAuthorizeResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthQuickAuthorizePayload = {
  /**
   * Serializes AuthQuickAuthorizePayload to protobuf.
   */
  encode: function (msg: PartialDeep<AuthQuickAuthorizePayload>): Uint8Array {
    return AuthQuickAuthorizePayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthQuickAuthorizePayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthQuickAuthorizePayload {
    return AuthQuickAuthorizePayload._readMessage(
      AuthQuickAuthorizePayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthQuickAuthorizePayload with all fields set to their default value.
   */
  initialize: function (): AuthQuickAuthorizePayload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthQuickAuthorizePayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.authToken) {
      writer.writeString(2, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthQuickAuthorizePayload,
    reader: BinaryReader,
  ): AuthQuickAuthorizePayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthQuickAuthorizeResponse = {
  /**
   * Serializes AuthQuickAuthorizeResponse to protobuf.
   */
  encode: function (msg: PartialDeep<AuthQuickAuthorizeResponse>): Uint8Array {
    return AuthQuickAuthorizeResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthQuickAuthorizeResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthQuickAuthorizeResponse {
    return AuthQuickAuthorizeResponse._readMessage(
      AuthQuickAuthorizeResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthQuickAuthorizeResponse with all fields set to their default value.
   */
  initialize: function (): AuthQuickAuthorizeResponse {
    return {
      authSuccess: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthQuickAuthorizeResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.authSuccess) {
      writer.writeBool(1, msg.authSuccess);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthQuickAuthorizeResponse,
    reader: BinaryReader,
  ): AuthQuickAuthorizeResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.authSuccess = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthMePayload = {
  /**
   * Serializes AuthMePayload to protobuf.
   */
  encode: function (msg: PartialDeep<AuthMePayload>): Uint8Array {
    return AuthMePayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthMePayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthMePayload {
    return AuthMePayload._readMessage(
      AuthMePayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthMePayload with all fields set to their default value.
   */
  initialize: function (): AuthMePayload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthMePayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.authToken) {
      writer.writeString(2, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthMePayload,
    reader: BinaryReader,
  ): AuthMePayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthMeResponse = {
  /**
   * Serializes AuthMeResponse to protobuf.
   */
  encode: function (msg: PartialDeep<AuthMeResponse>): Uint8Array {
    return AuthMeResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthMeResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthMeResponse {
    return AuthMeResponse._readMessage(
      AuthMeResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthMeResponse with all fields set to their default value.
   */
  initialize: function (): AuthMeResponse {
    return {
      personId: 0,
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
      title: "",
      groups: [],
      hasAvatar: false,
      lastUpdate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthMeResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.country) {
      writer.writeString(2, msg.country);
    }
    if (msg.city) {
      writer.writeString(3, msg.city);
    }
    if (msg.email) {
      writer.writeString(4, msg.email);
    }
    if (msg.phone) {
      writer.writeString(5, msg.phone);
    }
    if (msg.tenhouId) {
      writer.writeString(6, msg.tenhouId);
    }
    if (msg.title) {
      writer.writeString(7, msg.title);
    }
    if (msg.groups?.length) {
      writer.writePackedInt32(8, msg.groups);
    }
    if (msg.hasAvatar) {
      writer.writeBool(9, msg.hasAvatar);
    }
    if (msg.lastUpdate) {
      writer.writeString(10, msg.lastUpdate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthMeResponse,
    reader: BinaryReader,
  ): AuthMeResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.country = reader.readString();
          break;
        }
        case 3: {
          msg.city = reader.readString();
          break;
        }
        case 4: {
          msg.email = reader.readString();
          break;
        }
        case 5: {
          msg.phone = reader.readString();
          break;
        }
        case 6: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 7: {
          msg.title = reader.readString();
          break;
        }
        case 8: {
          if (reader.isDelimited()) {
            msg.groups.push(...reader.readPackedInt32());
          } else {
            msg.groups.push(reader.readInt32());
          }
          break;
        }
        case 9: {
          msg.hasAvatar = reader.readBool();
          break;
        }
        case 10: {
          msg.lastUpdate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthChangePasswordPayload = {
  /**
   * Serializes AuthChangePasswordPayload to protobuf.
   */
  encode: function (msg: PartialDeep<AuthChangePasswordPayload>): Uint8Array {
    return AuthChangePasswordPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthChangePasswordPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthChangePasswordPayload {
    return AuthChangePasswordPayload._readMessage(
      AuthChangePasswordPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthChangePasswordPayload with all fields set to their default value.
   */
  initialize: function (): AuthChangePasswordPayload {
    return {
      email: "",
      password: "",
      newPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthChangePasswordPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    if (msg.newPassword) {
      writer.writeString(3, msg.newPassword);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthChangePasswordPayload,
    reader: BinaryReader,
  ): AuthChangePasswordPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        case 3: {
          msg.newPassword = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthChangePasswordResponse = {
  /**
   * Serializes AuthChangePasswordResponse to protobuf.
   */
  encode: function (msg: PartialDeep<AuthChangePasswordResponse>): Uint8Array {
    return AuthChangePasswordResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthChangePasswordResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthChangePasswordResponse {
    return AuthChangePasswordResponse._readMessage(
      AuthChangePasswordResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthChangePasswordResponse with all fields set to their default value.
   */
  initialize: function (): AuthChangePasswordResponse {
    return {
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthChangePasswordResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.authToken) {
      writer.writeString(1, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthChangePasswordResponse,
    reader: BinaryReader,
  ): AuthChangePasswordResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthRequestResetPasswordPayload = {
  /**
   * Serializes AuthRequestResetPasswordPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthRequestResetPasswordPayload>,
  ): Uint8Array {
    return AuthRequestResetPasswordPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthRequestResetPasswordPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthRequestResetPasswordPayload {
    return AuthRequestResetPasswordPayload._readMessage(
      AuthRequestResetPasswordPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthRequestResetPasswordPayload with all fields set to their default value.
   */
  initialize: function (): AuthRequestResetPasswordPayload {
    return {
      email: "",
      sendEmail: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestResetPasswordPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.sendEmail) {
      writer.writeBool(2, msg.sendEmail);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestResetPasswordPayload,
    reader: BinaryReader,
  ): AuthRequestResetPasswordPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.sendEmail = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthRequestResetPasswordResponse = {
  /**
   * Serializes AuthRequestResetPasswordResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthRequestResetPasswordResponse>,
  ): Uint8Array {
    return AuthRequestResetPasswordResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthRequestResetPasswordResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthRequestResetPasswordResponse {
    return AuthRequestResetPasswordResponse._readMessage(
      AuthRequestResetPasswordResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthRequestResetPasswordResponse with all fields set to their default value.
   */
  initialize: function (): AuthRequestResetPasswordResponse {
    return {
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestResetPasswordResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.resetToken) {
      writer.writeString(1, msg.resetToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestResetPasswordResponse,
    reader: BinaryReader,
  ): AuthRequestResetPasswordResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.resetToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthApproveResetPasswordPayload = {
  /**
   * Serializes AuthApproveResetPasswordPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthApproveResetPasswordPayload>,
  ): Uint8Array {
    return AuthApproveResetPasswordPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthApproveResetPasswordPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AuthApproveResetPasswordPayload {
    return AuthApproveResetPasswordPayload._readMessage(
      AuthApproveResetPasswordPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthApproveResetPasswordPayload with all fields set to their default value.
   */
  initialize: function (): AuthApproveResetPasswordPayload {
    return {
      email: "",
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveResetPasswordPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.resetToken) {
      writer.writeString(2, msg.resetToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveResetPasswordPayload,
    reader: BinaryReader,
  ): AuthApproveResetPasswordPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.resetToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AuthApproveResetPasswordResponse = {
  /**
   * Serializes AuthApproveResetPasswordResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AuthApproveResetPasswordResponse>,
  ): Uint8Array {
    return AuthApproveResetPasswordResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AuthApproveResetPasswordResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AuthApproveResetPasswordResponse {
    return AuthApproveResetPasswordResponse._readMessage(
      AuthApproveResetPasswordResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AuthApproveResetPasswordResponse with all fields set to their default value.
   */
  initialize: function (): AuthApproveResetPasswordResponse {
    return {
      newTmpPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveResetPasswordResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.newTmpPassword) {
      writer.writeString(1, msg.newTmpPassword);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveResetPasswordResponse,
    reader: BinaryReader,
  ): AuthApproveResetPasswordResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.newTmpPassword = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetAccessRulesPayload = {
  /**
   * Serializes AccessGetAccessRulesPayload to protobuf.
   */
  encode: function (msg: PartialDeep<AccessGetAccessRulesPayload>): Uint8Array {
    return AccessGetAccessRulesPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAccessRulesPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAccessRulesPayload {
    return AccessGetAccessRulesPayload._readMessage(
      AccessGetAccessRulesPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAccessRulesPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAccessRulesPayload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAccessRulesPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAccessRulesPayload,
    reader: BinaryReader,
  ): AccessGetAccessRulesPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetAccessRulesResponse = {
  /**
   * Serializes AccessGetAccessRulesResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetAccessRulesResponse>,
  ): Uint8Array {
    return AccessGetAccessRulesResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAccessRulesResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAccessRulesResponse {
    return AccessGetAccessRulesResponse._readMessage(
      AccessGetAccessRulesResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAccessRulesResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAccessRulesResponse {
    return {
      rules: protoAtoms.AccessRules.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAccessRulesResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeMessage(1, msg.rules, protoAtoms.AccessRules._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAccessRulesResponse,
    reader: BinaryReader,
  ): AccessGetAccessRulesResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.rules, protoAtoms.AccessRules._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetRuleValuePayload = {
  /**
   * Serializes AccessGetRuleValuePayload to protobuf.
   */
  encode: function (msg: PartialDeep<AccessGetRuleValuePayload>): Uint8Array {
    return AccessGetRuleValuePayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetRuleValuePayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetRuleValuePayload {
    return AccessGetRuleValuePayload._readMessage(
      AccessGetRuleValuePayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetRuleValuePayload with all fields set to their default value.
   */
  initialize: function (): AccessGetRuleValuePayload {
    return {
      personId: 0,
      eventId: 0,
      ruleName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetRuleValuePayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    if (msg.ruleName) {
      writer.writeString(3, msg.ruleName);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetRuleValuePayload,
    reader: BinaryReader,
  ): AccessGetRuleValuePayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        case 3: {
          msg.ruleName = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetRuleValueResponse = {
  /**
   * Serializes AccessGetRuleValueResponse to protobuf.
   */
  encode: function (msg: PartialDeep<AccessGetRuleValueResponse>): Uint8Array {
    return AccessGetRuleValueResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetRuleValueResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetRuleValueResponse {
    return AccessGetRuleValueResponse._readMessage(
      AccessGetRuleValueResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetRuleValueResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetRuleValueResponse {
    return {
      value: protoAtoms.RuleValue.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetRuleValueResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.value) {
      writer.writeMessage(1, msg.value, protoAtoms.RuleValue._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetRuleValueResponse,
    reader: BinaryReader,
  ): AccessGetRuleValueResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.value, protoAtoms.RuleValue._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetEventAdminsPayload = {
  /**
   * Serializes AccessGetEventAdminsPayload to protobuf.
   */
  encode: function (msg: PartialDeep<AccessGetEventAdminsPayload>): Uint8Array {
    return AccessGetEventAdminsPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetEventAdminsPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetEventAdminsPayload {
    return AccessGetEventAdminsPayload._readMessage(
      AccessGetEventAdminsPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetEventAdminsPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetEventAdminsPayload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetEventAdminsPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.eventId) {
      writer.writeInt32(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetEventAdminsPayload,
    reader: BinaryReader,
  ): AccessGetEventAdminsPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetEventAdminsResponse = {
  /**
   * Serializes AccessGetEventAdminsResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetEventAdminsResponse>,
  ): Uint8Array {
    return AccessGetEventAdminsResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetEventAdminsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetEventAdminsResponse {
    return AccessGetEventAdminsResponse._readMessage(
      AccessGetEventAdminsResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetEventAdminsResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetEventAdminsResponse {
    return {
      admins: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetEventAdminsResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.admins?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.admins as any,
        protoAtoms.EventAdmin._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetEventAdminsResponse,
    reader: BinaryReader,
  ): AccessGetEventAdminsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.EventAdmin.initialize();
          reader.readMessage(m, protoAtoms.EventAdmin._readMessage);
          msg.admins.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetSuperadminFlagPayload = {
  /**
   * Serializes AccessGetSuperadminFlagPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetSuperadminFlagPayload>,
  ): Uint8Array {
    return AccessGetSuperadminFlagPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetSuperadminFlagPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetSuperadminFlagPayload {
    return AccessGetSuperadminFlagPayload._readMessage(
      AccessGetSuperadminFlagPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetSuperadminFlagPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetSuperadminFlagPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetSuperadminFlagPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetSuperadminFlagPayload,
    reader: BinaryReader,
  ): AccessGetSuperadminFlagPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetSuperadminFlagResponse = {
  /**
   * Serializes AccessGetSuperadminFlagResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetSuperadminFlagResponse>,
  ): Uint8Array {
    return AccessGetSuperadminFlagResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetSuperadminFlagResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetSuperadminFlagResponse {
    return AccessGetSuperadminFlagResponse._readMessage(
      AccessGetSuperadminFlagResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetSuperadminFlagResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetSuperadminFlagResponse {
    return {
      isAdmin: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetSuperadminFlagResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.isAdmin) {
      writer.writeBool(1, msg.isAdmin);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetSuperadminFlagResponse,
    reader: BinaryReader,
  ): AccessGetSuperadminFlagResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.isAdmin = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetOwnedEventIdsPayload = {
  /**
   * Serializes AccessGetOwnedEventIdsPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetOwnedEventIdsPayload>,
  ): Uint8Array {
    return AccessGetOwnedEventIdsPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetOwnedEventIdsPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetOwnedEventIdsPayload {
    return AccessGetOwnedEventIdsPayload._readMessage(
      AccessGetOwnedEventIdsPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetOwnedEventIdsPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetOwnedEventIdsPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetOwnedEventIdsPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetOwnedEventIdsPayload,
    reader: BinaryReader,
  ): AccessGetOwnedEventIdsPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetOwnedEventIdsResponse = {
  /**
   * Serializes AccessGetOwnedEventIdsResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetOwnedEventIdsResponse>,
  ): Uint8Array {
    return AccessGetOwnedEventIdsResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetOwnedEventIdsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetOwnedEventIdsResponse {
    return AccessGetOwnedEventIdsResponse._readMessage(
      AccessGetOwnedEventIdsResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetOwnedEventIdsResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetOwnedEventIdsResponse {
    return {
      eventIds: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetOwnedEventIdsResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.eventIds?.length) {
      writer.writePackedInt32(1, msg.eventIds);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetOwnedEventIdsResponse,
    reader: BinaryReader,
  ): AccessGetOwnedEventIdsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          if (reader.isDelimited()) {
            msg.eventIds.push(...reader.readPackedInt32());
          } else {
            msg.eventIds.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetRulesListPayload = {
  /**
   * Serializes AccessGetRulesListPayload to protobuf.
   */
  encode: function (_msg?: PartialDeep<AccessGetRulesListPayload>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes AccessGetRulesListPayload from protobuf.
   */
  decode: function (_bytes?: ByteSource): AccessGetRulesListPayload {
    return {};
  },

  /**
   * Initializes AccessGetRulesListPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetRulesListPayload {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<AccessGetRulesListPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: AccessGetRulesListPayload,
    _reader: BinaryReader,
  ): AccessGetRulesListPayload {
    return _msg;
  },
};

export const AccessGetRulesListResponse = {
  /**
   * Serializes AccessGetRulesListResponse to protobuf.
   */
  encode: function (msg: PartialDeep<AccessGetRulesListResponse>): Uint8Array {
    return AccessGetRulesListResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetRulesListResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetRulesListResponse {
    return AccessGetRulesListResponse._readMessage(
      AccessGetRulesListResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetRulesListResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetRulesListResponse {
    return {
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetRulesListResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.items?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.items as any,
        protoAtoms.RuleListItem._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetRulesListResponse,
    reader: BinaryReader,
  ): AccessGetRulesListResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.RuleListItem.initialize();
          reader.readMessage(m, protoAtoms.RuleListItem._readMessage);
          msg.items.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetAllEventRulesPayload = {
  /**
   * Serializes AccessGetAllEventRulesPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetAllEventRulesPayload>,
  ): Uint8Array {
    return AccessGetAllEventRulesPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAllEventRulesPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAllEventRulesPayload {
    return AccessGetAllEventRulesPayload._readMessage(
      AccessGetAllEventRulesPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAllEventRulesPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAllEventRulesPayload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllEventRulesPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.eventId) {
      writer.writeInt32(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllEventRulesPayload,
    reader: BinaryReader,
  ): AccessGetAllEventRulesPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetAllEventRulesResponse = {
  /**
   * Serializes AccessGetAllEventRulesResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetAllEventRulesResponse>,
  ): Uint8Array {
    return AccessGetAllEventRulesResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAllEventRulesResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAllEventRulesResponse {
    return AccessGetAllEventRulesResponse._readMessage(
      AccessGetAllEventRulesResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAllEventRulesResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAllEventRulesResponse {
    return {
      personRules: [],
      groupRules: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllEventRulesResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personRules?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.personRules as any,
        protoAtoms.EventRuleListItem._writeMessage,
      );
    }
    if (msg.groupRules?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.groupRules as any,
        protoAtoms.EventRuleListItem._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllEventRulesResponse,
    reader: BinaryReader,
  ): AccessGetAllEventRulesResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.EventRuleListItem.initialize();
          reader.readMessage(m, protoAtoms.EventRuleListItem._readMessage);
          msg.personRules.push(m);
          break;
        }
        case 2: {
          const m = protoAtoms.EventRuleListItem.initialize();
          reader.readMessage(m, protoAtoms.EventRuleListItem._readMessage);
          msg.groupRules.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetPersonAccessPayload = {
  /**
   * Serializes AccessGetPersonAccessPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetPersonAccessPayload>,
  ): Uint8Array {
    return AccessGetPersonAccessPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetPersonAccessPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetPersonAccessPayload {
    return AccessGetPersonAccessPayload._readMessage(
      AccessGetPersonAccessPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetPersonAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetPersonAccessPayload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetPersonAccessPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetPersonAccessPayload,
    reader: BinaryReader,
  ): AccessGetPersonAccessPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetPersonAccessResponse = {
  /**
   * Serializes AccessGetPersonAccessResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetPersonAccessResponse>,
  ): Uint8Array {
    return AccessGetPersonAccessResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetPersonAccessResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetPersonAccessResponse {
    return AccessGetPersonAccessResponse._readMessage(
      AccessGetPersonAccessResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetPersonAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetPersonAccessResponse {
    return {
      rules: protoAtoms.AccessRules.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetPersonAccessResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeMessage(1, msg.rules, protoAtoms.AccessRules._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetPersonAccessResponse,
    reader: BinaryReader,
  ): AccessGetPersonAccessResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.rules, protoAtoms.AccessRules._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetGroupAccessPayload = {
  /**
   * Serializes AccessGetGroupAccessPayload to protobuf.
   */
  encode: function (msg: PartialDeep<AccessGetGroupAccessPayload>): Uint8Array {
    return AccessGetGroupAccessPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetGroupAccessPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetGroupAccessPayload {
    return AccessGetGroupAccessPayload._readMessage(
      AccessGetGroupAccessPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetGroupAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetGroupAccessPayload {
    return {
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetGroupAccessPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetGroupAccessPayload,
    reader: BinaryReader,
  ): AccessGetGroupAccessPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetGroupAccessResponse = {
  /**
   * Serializes AccessGetGroupAccessResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetGroupAccessResponse>,
  ): Uint8Array {
    return AccessGetGroupAccessResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetGroupAccessResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetGroupAccessResponse {
    return AccessGetGroupAccessResponse._readMessage(
      AccessGetGroupAccessResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetGroupAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetGroupAccessResponse {
    return {
      rules: protoAtoms.AccessRules.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetGroupAccessResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeMessage(1, msg.rules, protoAtoms.AccessRules._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetGroupAccessResponse,
    reader: BinaryReader,
  ): AccessGetGroupAccessResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.rules, protoAtoms.AccessRules._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetAllPersonAccessPayload = {
  /**
   * Serializes AccessGetAllPersonAccessPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetAllPersonAccessPayload>,
  ): Uint8Array {
    return AccessGetAllPersonAccessPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAllPersonAccessPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAllPersonAccessPayload {
    return AccessGetAllPersonAccessPayload._readMessage(
      AccessGetAllPersonAccessPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAllPersonAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAllPersonAccessPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllPersonAccessPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllPersonAccessPayload,
    reader: BinaryReader,
  ): AccessGetAllPersonAccessPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetAllPersonAccessResponse = {
  /**
   * Serializes AccessGetAllPersonAccessResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetAllPersonAccessResponse>,
  ): Uint8Array {
    return AccessGetAllPersonAccessResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAllPersonAccessResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAllPersonAccessResponse {
    return AccessGetAllPersonAccessResponse._readMessage(
      AccessGetAllPersonAccessResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAllPersonAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAllPersonAccessResponse {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllPersonAccessResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.rulesByEvent) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.rulesByEvent).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        AccessGetAllPersonAccessResponse.RulesByEvent._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllPersonAccessResponse,
    reader: BinaryReader,
  ): AccessGetAllPersonAccessResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as AccessGetAllPersonAccessResponse.RulesByEvent;
          reader.readMessage(
            map,
            AccessGetAllPersonAccessResponse.RulesByEvent._readMessage,
          );
          msg.rulesByEvent[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<AccessGetAllPersonAccessResponse.RulesByEvent>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          protoAtoms.RuleListItemExMap._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: AccessGetAllPersonAccessResponse.RulesByEvent,
      reader: BinaryReader,
    ): AccessGetAllPersonAccessResponse.RulesByEvent {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoAtoms.RuleListItemExMap.initialize();
            reader.readMessage(
              msg.value,
              protoAtoms.RuleListItemExMap._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const AccessGetAllGroupAccessPayload = {
  /**
   * Serializes AccessGetAllGroupAccessPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetAllGroupAccessPayload>,
  ): Uint8Array {
    return AccessGetAllGroupAccessPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAllGroupAccessPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAllGroupAccessPayload {
    return AccessGetAllGroupAccessPayload._readMessage(
      AccessGetAllGroupAccessPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAllGroupAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAllGroupAccessPayload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllGroupAccessPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllGroupAccessPayload,
    reader: BinaryReader,
  ): AccessGetAllGroupAccessPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessGetAllGroupAccessResponse = {
  /**
   * Serializes AccessGetAllGroupAccessResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessGetAllGroupAccessResponse>,
  ): Uint8Array {
    return AccessGetAllGroupAccessResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessGetAllGroupAccessResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessGetAllGroupAccessResponse {
    return AccessGetAllGroupAccessResponse._readMessage(
      AccessGetAllGroupAccessResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessGetAllGroupAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAllGroupAccessResponse {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllGroupAccessResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.rulesByEvent) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.rulesByEvent).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        AccessGetAllGroupAccessResponse.RulesByEvent._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllGroupAccessResponse,
    reader: BinaryReader,
  ): AccessGetAllGroupAccessResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as AccessGetAllGroupAccessResponse.RulesByEvent;
          reader.readMessage(
            map,
            AccessGetAllGroupAccessResponse.RulesByEvent._readMessage,
          );
          msg.rulesByEvent[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<AccessGetAllGroupAccessResponse.RulesByEvent>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          protoAtoms.RuleListItemExMap._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: AccessGetAllGroupAccessResponse.RulesByEvent,
      reader: BinaryReader,
    ): AccessGetAllGroupAccessResponse.RulesByEvent {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoAtoms.RuleListItemExMap.initialize();
            reader.readMessage(
              msg.value,
              protoAtoms.RuleListItemExMap._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const AccessAddRuleForPersonPayload = {
  /**
   * Serializes AccessAddRuleForPersonPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddRuleForPersonPayload>,
  ): Uint8Array {
    return AccessAddRuleForPersonPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddRuleForPersonPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessAddRuleForPersonPayload {
    return AccessAddRuleForPersonPayload._readMessage(
      AccessAddRuleForPersonPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForPersonPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValue.initialize(),
      ruleType: "",
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForPersonPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, protoAtoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.personId) {
      writer.writeInt32(4, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(5, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForPersonPayload,
    reader: BinaryReader,
  ): AccessAddRuleForPersonPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, protoAtoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.personId = reader.readInt32();
          break;
        }
        case 5: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessAddRuleForPersonResponse = {
  /**
   * Serializes AccessAddRuleForPersonResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddRuleForPersonResponse>,
  ): Uint8Array {
    return AccessAddRuleForPersonResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddRuleForPersonResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessAddRuleForPersonResponse {
    return AccessAddRuleForPersonResponse._readMessage(
      AccessAddRuleForPersonResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddRuleForPersonResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForPersonResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForPersonResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForPersonResponse,
    reader: BinaryReader,
  ): AccessAddRuleForPersonResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessAddRuleForGroupPayload = {
  /**
   * Serializes AccessAddRuleForGroupPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddRuleForGroupPayload>,
  ): Uint8Array {
    return AccessAddRuleForGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddRuleForGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessAddRuleForGroupPayload {
    return AccessAddRuleForGroupPayload._readMessage(
      AccessAddRuleForGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForGroupPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValue.initialize(),
      ruleType: "",
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, protoAtoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.groupId) {
      writer.writeInt32(4, msg.groupId);
    }
    if (msg.eventId) {
      writer.writeInt32(5, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForGroupPayload,
    reader: BinaryReader,
  ): AccessAddRuleForGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, protoAtoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.groupId = reader.readInt32();
          break;
        }
        case 5: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessAddRuleForGroupResponse = {
  /**
   * Serializes AccessAddRuleForGroupResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddRuleForGroupResponse>,
  ): Uint8Array {
    return AccessAddRuleForGroupResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddRuleForGroupResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AccessAddRuleForGroupResponse {
    return AccessAddRuleForGroupResponse._readMessage(
      AccessAddRuleForGroupResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddRuleForGroupResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForGroupResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForGroupResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForGroupResponse,
    reader: BinaryReader,
  ): AccessAddRuleForGroupResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessUpdateRuleForPersonPayload = {
  /**
   * Serializes AccessUpdateRuleForPersonPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessUpdateRuleForPersonPayload>,
  ): Uint8Array {
    return AccessUpdateRuleForPersonPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessUpdateRuleForPersonPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessUpdateRuleForPersonPayload {
    return AccessUpdateRuleForPersonPayload._readMessage(
      AccessUpdateRuleForPersonPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessUpdateRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessUpdateRuleForPersonPayload {
    return {
      ruleId: 0,
      ruleValue: protoAtoms.RuleValue.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessUpdateRuleForPersonPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, protoAtoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessUpdateRuleForPersonPayload,
    reader: BinaryReader,
  ): AccessUpdateRuleForPersonPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, protoAtoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessUpdateRuleForGroupPayload = {
  /**
   * Serializes AccessUpdateRuleForGroupPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessUpdateRuleForGroupPayload>,
  ): Uint8Array {
    return AccessUpdateRuleForGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessUpdateRuleForGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessUpdateRuleForGroupPayload {
    return AccessUpdateRuleForGroupPayload._readMessage(
      AccessUpdateRuleForGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessUpdateRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessUpdateRuleForGroupPayload {
    return {
      ruleId: 0,
      ruleValue: protoAtoms.RuleValue.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessUpdateRuleForGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, protoAtoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessUpdateRuleForGroupPayload,
    reader: BinaryReader,
  ): AccessUpdateRuleForGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, protoAtoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessDeleteRuleForPersonPayload = {
  /**
   * Serializes AccessDeleteRuleForPersonPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessDeleteRuleForPersonPayload>,
  ): Uint8Array {
    return AccessDeleteRuleForPersonPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessDeleteRuleForPersonPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessDeleteRuleForPersonPayload {
    return AccessDeleteRuleForPersonPayload._readMessage(
      AccessDeleteRuleForPersonPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessDeleteRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessDeleteRuleForPersonPayload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessDeleteRuleForPersonPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessDeleteRuleForPersonPayload,
    reader: BinaryReader,
  ): AccessDeleteRuleForPersonPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessDeleteRuleForGroupPayload = {
  /**
   * Serializes AccessDeleteRuleForGroupPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessDeleteRuleForGroupPayload>,
  ): Uint8Array {
    return AccessDeleteRuleForGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessDeleteRuleForGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessDeleteRuleForGroupPayload {
    return AccessDeleteRuleForGroupPayload._readMessage(
      AccessDeleteRuleForGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessDeleteRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessDeleteRuleForGroupPayload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessDeleteRuleForGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessDeleteRuleForGroupPayload,
    reader: BinaryReader,
  ): AccessDeleteRuleForGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessClearAccessCachePayload = {
  /**
   * Serializes AccessClearAccessCachePayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessClearAccessCachePayload>,
  ): Uint8Array {
    return AccessClearAccessCachePayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessClearAccessCachePayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessClearAccessCachePayload {
    return AccessClearAccessCachePayload._readMessage(
      AccessClearAccessCachePayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessClearAccessCachePayload with all fields set to their default value.
   */
  initialize: function (): AccessClearAccessCachePayload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessClearAccessCachePayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessClearAccessCachePayload,
    reader: BinaryReader,
  ): AccessClearAccessCachePayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForPersonPayload = {
  /**
   * Serializes AccessAddSystemWideRuleForPersonPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonPayload>,
  ): Uint8Array {
    return AccessAddSystemWideRuleForPersonPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddSystemWideRuleForPersonPayload from protobuf.
   */
  decode: function (
    bytes: ByteSource,
  ): AccessAddSystemWideRuleForPersonPayload {
    return AccessAddSystemWideRuleForPersonPayload._readMessage(
      AccessAddSystemWideRuleForPersonPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForPersonPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValue.initialize(),
      ruleType: "",
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, protoAtoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.personId) {
      writer.writeInt32(4, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForPersonPayload,
    reader: BinaryReader,
  ): AccessAddSystemWideRuleForPersonPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, protoAtoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForPersonResponse = {
  /**
   * Serializes AccessAddSystemWideRuleForPersonResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonResponse>,
  ): Uint8Array {
    return AccessAddSystemWideRuleForPersonResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddSystemWideRuleForPersonResponse from protobuf.
   */
  decode: function (
    bytes: ByteSource,
  ): AccessAddSystemWideRuleForPersonResponse {
    return AccessAddSystemWideRuleForPersonResponse._readMessage(
      AccessAddSystemWideRuleForPersonResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForPersonResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForPersonResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForPersonResponse,
    reader: BinaryReader,
  ): AccessAddSystemWideRuleForPersonResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForGroupPayload = {
  /**
   * Serializes AccessAddSystemWideRuleForGroupPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupPayload>,
  ): Uint8Array {
    return AccessAddSystemWideRuleForGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddSystemWideRuleForGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): AccessAddSystemWideRuleForGroupPayload {
    return AccessAddSystemWideRuleForGroupPayload._readMessage(
      AccessAddSystemWideRuleForGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForGroupPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValue.initialize(),
      ruleType: "",
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, protoAtoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.groupId) {
      writer.writeInt32(4, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForGroupPayload,
    reader: BinaryReader,
  ): AccessAddSystemWideRuleForGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, protoAtoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForGroupResponse = {
  /**
   * Serializes AccessAddSystemWideRuleForGroupResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupResponse>,
  ): Uint8Array {
    return AccessAddSystemWideRuleForGroupResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AccessAddSystemWideRuleForGroupResponse from protobuf.
   */
  decode: function (
    bytes: ByteSource,
  ): AccessAddSystemWideRuleForGroupResponse {
    return AccessAddSystemWideRuleForGroupResponse._readMessage(
      AccessAddSystemWideRuleForGroupResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForGroupResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForGroupResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForGroupResponse,
    reader: BinaryReader,
  ): AccessAddSystemWideRuleForGroupResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsCreateAccountPayload = {
  /**
   * Serializes PersonsCreateAccountPayload to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsCreateAccountPayload>): Uint8Array {
    return PersonsCreateAccountPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsCreateAccountPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsCreateAccountPayload {
    return PersonsCreateAccountPayload._readMessage(
      PersonsCreateAccountPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsCreateAccountPayload with all fields set to their default value.
   */
  initialize: function (): PersonsCreateAccountPayload {
    return {
      email: "",
      password: "",
      title: "",
      city: "",
      phone: "",
      tenhouId: "",
      country: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateAccountPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    if (msg.title) {
      writer.writeString(3, msg.title);
    }
    if (msg.city) {
      writer.writeString(4, msg.city);
    }
    if (msg.phone) {
      writer.writeString(5, msg.phone);
    }
    if (msg.tenhouId) {
      writer.writeString(6, msg.tenhouId);
    }
    if (msg.country) {
      writer.writeString(7, msg.country);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateAccountPayload,
    reader: BinaryReader,
  ): PersonsCreateAccountPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        case 3: {
          msg.title = reader.readString();
          break;
        }
        case 4: {
          msg.city = reader.readString();
          break;
        }
        case 5: {
          msg.phone = reader.readString();
          break;
        }
        case 6: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 7: {
          msg.country = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsCreateAccountResponse = {
  /**
   * Serializes PersonsCreateAccountResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsCreateAccountResponse>,
  ): Uint8Array {
    return PersonsCreateAccountResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsCreateAccountResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsCreateAccountResponse {
    return PersonsCreateAccountResponse._readMessage(
      PersonsCreateAccountResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsCreateAccountResponse with all fields set to their default value.
   */
  initialize: function (): PersonsCreateAccountResponse {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateAccountResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateAccountResponse,
    reader: BinaryReader,
  ): PersonsCreateAccountResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsCreateGroupPayload = {
  /**
   * Serializes PersonsCreateGroupPayload to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsCreateGroupPayload>): Uint8Array {
    return PersonsCreateGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsCreateGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsCreateGroupPayload {
    return PersonsCreateGroupPayload._readMessage(
      PersonsCreateGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsCreateGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsCreateGroupPayload {
    return {
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.title) {
      writer.writeString(1, msg.title);
    }
    if (msg.description) {
      writer.writeString(2, msg.description);
    }
    if (msg.color) {
      writer.writeString(3, msg.color);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateGroupPayload,
    reader: BinaryReader,
  ): PersonsCreateGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.title = reader.readString();
          break;
        }
        case 2: {
          msg.description = reader.readString();
          break;
        }
        case 3: {
          msg.color = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsCreateGroupResponse = {
  /**
   * Serializes PersonsCreateGroupResponse to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsCreateGroupResponse>): Uint8Array {
    return PersonsCreateGroupResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsCreateGroupResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsCreateGroupResponse {
    return PersonsCreateGroupResponse._readMessage(
      PersonsCreateGroupResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsCreateGroupResponse with all fields set to their default value.
   */
  initialize: function (): PersonsCreateGroupResponse {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateGroupResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateGroupResponse,
    reader: BinaryReader,
  ): PersonsCreateGroupResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsUpdateGroupPayload = {
  /**
   * Serializes PersonsUpdateGroupPayload to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsUpdateGroupPayload>): Uint8Array {
    return PersonsUpdateGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsUpdateGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsUpdateGroupPayload {
    return PersonsUpdateGroupPayload._readMessage(
      PersonsUpdateGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsUpdateGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsUpdateGroupPayload {
    return {
      groupId: 0,
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsUpdateGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.description) {
      writer.writeString(3, msg.description);
    }
    if (msg.color) {
      writer.writeString(4, msg.color);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsUpdateGroupPayload,
    reader: BinaryReader,
  ): PersonsUpdateGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.description = reader.readString();
          break;
        }
        case 4: {
          msg.color = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsDeleteGroupPayload = {
  /**
   * Serializes PersonsDeleteGroupPayload to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsDeleteGroupPayload>): Uint8Array {
    return PersonsDeleteGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsDeleteGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsDeleteGroupPayload {
    return PersonsDeleteGroupPayload._readMessage(
      PersonsDeleteGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsDeleteGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsDeleteGroupPayload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsDeleteGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsDeleteGroupPayload,
    reader: BinaryReader,
  ): PersonsDeleteGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsAddPersonToGroupPayload = {
  /**
   * Serializes PersonsAddPersonToGroupPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsAddPersonToGroupPayload>,
  ): Uint8Array {
    return PersonsAddPersonToGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsAddPersonToGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsAddPersonToGroupPayload {
    return PersonsAddPersonToGroupPayload._readMessage(
      PersonsAddPersonToGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsAddPersonToGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsAddPersonToGroupPayload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsAddPersonToGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.groupId) {
      writer.writeInt32(2, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsAddPersonToGroupPayload,
    reader: BinaryReader,
  ): PersonsAddPersonToGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsRemovePersonFromGroupPayload = {
  /**
   * Serializes PersonsRemovePersonFromGroupPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsRemovePersonFromGroupPayload>,
  ): Uint8Array {
    return PersonsRemovePersonFromGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsRemovePersonFromGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsRemovePersonFromGroupPayload {
    return PersonsRemovePersonFromGroupPayload._readMessage(
      PersonsRemovePersonFromGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsRemovePersonFromGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsRemovePersonFromGroupPayload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsRemovePersonFromGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.groupId) {
      writer.writeInt32(2, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsRemovePersonFromGroupPayload,
    reader: BinaryReader,
  ): PersonsRemovePersonFromGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetPersonsOfGroupPayload = {
  /**
   * Serializes PersonsGetPersonsOfGroupPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsGetPersonsOfGroupPayload>,
  ): Uint8Array {
    return PersonsGetPersonsOfGroupPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetPersonsOfGroupPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetPersonsOfGroupPayload {
    return PersonsGetPersonsOfGroupPayload._readMessage(
      PersonsGetPersonsOfGroupPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetPersonsOfGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonsOfGroupPayload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonsOfGroupPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonsOfGroupPayload,
    reader: BinaryReader,
  ): PersonsGetPersonsOfGroupPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetPersonsOfGroupResponse = {
  /**
   * Serializes PersonsGetPersonsOfGroupResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsGetPersonsOfGroupResponse>,
  ): Uint8Array {
    return PersonsGetPersonsOfGroupResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetPersonsOfGroupResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetPersonsOfGroupResponse {
    return PersonsGetPersonsOfGroupResponse._readMessage(
      PersonsGetPersonsOfGroupResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetPersonsOfGroupResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonsOfGroupResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonsOfGroupResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.people?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.people as any,
        protoAtoms.Person._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonsOfGroupResponse,
    reader: BinaryReader,
  ): PersonsGetPersonsOfGroupResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.Person.initialize();
          reader.readMessage(m, protoAtoms.Person._readMessage);
          msg.people.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetGroupsOfPersonPayload = {
  /**
   * Serializes PersonsGetGroupsOfPersonPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsGetGroupsOfPersonPayload>,
  ): Uint8Array {
    return PersonsGetGroupsOfPersonPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetGroupsOfPersonPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetGroupsOfPersonPayload {
    return PersonsGetGroupsOfPersonPayload._readMessage(
      PersonsGetGroupsOfPersonPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetGroupsOfPersonPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsOfPersonPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsOfPersonPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsOfPersonPayload,
    reader: BinaryReader,
  ): PersonsGetGroupsOfPersonPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetGroupsOfPersonResponse = {
  /**
   * Serializes PersonsGetGroupsOfPersonResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsGetGroupsOfPersonResponse>,
  ): Uint8Array {
    return PersonsGetGroupsOfPersonResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetGroupsOfPersonResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetGroupsOfPersonResponse {
    return PersonsGetGroupsOfPersonResponse._readMessage(
      PersonsGetGroupsOfPersonResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetGroupsOfPersonResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsOfPersonResponse {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsOfPersonResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groups?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.groups as any,
        protoAtoms.Group._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsOfPersonResponse,
    reader: BinaryReader,
  ): PersonsGetGroupsOfPersonResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.Group.initialize();
          reader.readMessage(m, protoAtoms.Group._readMessage);
          msg.groups.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsUpdatePersonalInfoPayload = {
  /**
   * Serializes PersonsUpdatePersonalInfoPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsUpdatePersonalInfoPayload>,
  ): Uint8Array {
    return PersonsUpdatePersonalInfoPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsUpdatePersonalInfoPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsUpdatePersonalInfoPayload {
    return PersonsUpdatePersonalInfoPayload._readMessage(
      PersonsUpdatePersonalInfoPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsUpdatePersonalInfoPayload with all fields set to their default value.
   */
  initialize: function (): PersonsUpdatePersonalInfoPayload {
    return {
      id: 0,
      title: "",
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
      hasAvatar: false,
      avatarData: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsUpdatePersonalInfoPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.country) {
      writer.writeString(3, msg.country);
    }
    if (msg.city) {
      writer.writeString(4, msg.city);
    }
    if (msg.email) {
      writer.writeString(5, msg.email);
    }
    if (msg.phone) {
      writer.writeString(6, msg.phone);
    }
    if (msg.tenhouId) {
      writer.writeString(7, msg.tenhouId);
    }
    if (msg.hasAvatar) {
      writer.writeBool(8, msg.hasAvatar);
    }
    if (msg.avatarData) {
      writer.writeString(9, msg.avatarData);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsUpdatePersonalInfoPayload,
    reader: BinaryReader,
  ): PersonsUpdatePersonalInfoPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.country = reader.readString();
          break;
        }
        case 4: {
          msg.city = reader.readString();
          break;
        }
        case 5: {
          msg.email = reader.readString();
          break;
        }
        case 6: {
          msg.phone = reader.readString();
          break;
        }
        case 7: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 8: {
          msg.hasAvatar = reader.readBool();
          break;
        }
        case 9: {
          msg.avatarData = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetPersonalInfoPayload = {
  /**
   * Serializes PersonsGetPersonalInfoPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsGetPersonalInfoPayload>,
  ): Uint8Array {
    return PersonsGetPersonalInfoPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetPersonalInfoPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetPersonalInfoPayload {
    return PersonsGetPersonalInfoPayload._readMessage(
      PersonsGetPersonalInfoPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetPersonalInfoPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonalInfoPayload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonalInfoPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ids?.length) {
      writer.writePackedInt32(1, msg.ids);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonalInfoPayload,
    reader: BinaryReader,
  ): PersonsGetPersonalInfoPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          if (reader.isDelimited()) {
            msg.ids.push(...reader.readPackedInt32());
          } else {
            msg.ids.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetPersonalInfoResponse = {
  /**
   * Serializes PersonsGetPersonalInfoResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsGetPersonalInfoResponse>,
  ): Uint8Array {
    return PersonsGetPersonalInfoResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetPersonalInfoResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetPersonalInfoResponse {
    return PersonsGetPersonalInfoResponse._readMessage(
      PersonsGetPersonalInfoResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetPersonalInfoResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonalInfoResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonalInfoResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.people?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.people as any,
        protoAtoms.PersonEx._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonalInfoResponse,
    reader: BinaryReader,
  ): PersonsGetPersonalInfoResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.PersonEx.initialize();
          reader.readMessage(m, protoAtoms.PersonEx._readMessage);
          msg.people.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsFindByTenhouIdsPayload = {
  /**
   * Serializes PersonsFindByTenhouIdsPayload to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsFindByTenhouIdsPayload>,
  ): Uint8Array {
    return PersonsFindByTenhouIdsPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsFindByTenhouIdsPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsFindByTenhouIdsPayload {
    return PersonsFindByTenhouIdsPayload._readMessage(
      PersonsFindByTenhouIdsPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsFindByTenhouIdsPayload with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTenhouIdsPayload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTenhouIdsPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ids?.length) {
      writer.writeRepeatedString(1, msg.ids);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTenhouIdsPayload,
    reader: BinaryReader,
  ): PersonsFindByTenhouIdsPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ids.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsFindByTenhouIdsResponse = {
  /**
   * Serializes PersonsFindByTenhouIdsResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<PersonsFindByTenhouIdsResponse>,
  ): Uint8Array {
    return PersonsFindByTenhouIdsResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsFindByTenhouIdsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsFindByTenhouIdsResponse {
    return PersonsFindByTenhouIdsResponse._readMessage(
      PersonsFindByTenhouIdsResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsFindByTenhouIdsResponse with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTenhouIdsResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTenhouIdsResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.people?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.people as any,
        protoAtoms.PersonEx._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTenhouIdsResponse,
    reader: BinaryReader,
  ): PersonsFindByTenhouIdsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.PersonEx.initialize();
          reader.readMessage(m, protoAtoms.PersonEx._readMessage);
          msg.people.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsFindByTitlePayload = {
  /**
   * Serializes PersonsFindByTitlePayload to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsFindByTitlePayload>): Uint8Array {
    return PersonsFindByTitlePayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsFindByTitlePayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsFindByTitlePayload {
    return PersonsFindByTitlePayload._readMessage(
      PersonsFindByTitlePayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsFindByTitlePayload with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTitlePayload {
    return {
      query: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTitlePayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.query) {
      writer.writeString(1, msg.query);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTitlePayload,
    reader: BinaryReader,
  ): PersonsFindByTitlePayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.query = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsFindByTitleResponse = {
  /**
   * Serializes PersonsFindByTitleResponse to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsFindByTitleResponse>): Uint8Array {
    return PersonsFindByTitleResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsFindByTitleResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsFindByTitleResponse {
    return PersonsFindByTitleResponse._readMessage(
      PersonsFindByTitleResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsFindByTitleResponse with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTitleResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTitleResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.people?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.people as any,
        protoAtoms.Person._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTitleResponse,
    reader: BinaryReader,
  ): PersonsFindByTitleResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.Person.initialize();
          reader.readMessage(m, protoAtoms.Person._readMessage);
          msg.people.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetGroupsPayload = {
  /**
   * Serializes PersonsGetGroupsPayload to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsGetGroupsPayload>): Uint8Array {
    return PersonsGetGroupsPayload._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetGroupsPayload from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetGroupsPayload {
    return PersonsGetGroupsPayload._readMessage(
      PersonsGetGroupsPayload.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetGroupsPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsPayload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsPayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.ids?.length) {
      writer.writePackedInt32(1, msg.ids);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsPayload,
    reader: BinaryReader,
  ): PersonsGetGroupsPayload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          if (reader.isDelimited()) {
            msg.ids.push(...reader.readPackedInt32());
          } else {
            msg.ids.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonsGetGroupsResponse = {
  /**
   * Serializes PersonsGetGroupsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<PersonsGetGroupsResponse>): Uint8Array {
    return PersonsGetGroupsResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PersonsGetGroupsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PersonsGetGroupsResponse {
    return PersonsGetGroupsResponse._readMessage(
      PersonsGetGroupsResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PersonsGetGroupsResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsResponse {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.groups?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.groups as any,
        protoAtoms.Group._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsResponse,
    reader: BinaryReader,
  ): PersonsGetGroupsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoAtoms.Group.initialize();
          reader.readMessage(m, protoAtoms.Group._readMessage);
          msg.groups.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DepersonalizePayload = {
  /**
   * Serializes DepersonalizePayload to protobuf.
   */
  encode: function (_msg?: PartialDeep<DepersonalizePayload>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes DepersonalizePayload from protobuf.
   */
  decode: function (_bytes?: ByteSource): DepersonalizePayload {
    return {};
  },

  /**
   * Initializes DepersonalizePayload with all fields set to their default value.
   */
  initialize: function (): DepersonalizePayload {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<DepersonalizePayload>,
    writer: BinaryWriter,
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: DepersonalizePayload,
    _reader: BinaryReader,
  ): DepersonalizePayload {
    return _msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const AuthRequestRegistrationPayloadJSON = {
  /**
   * Serializes AuthRequestRegistrationPayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthRequestRegistrationPayload>): string {
    return JSON.stringify(
      AuthRequestRegistrationPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthRequestRegistrationPayload from JSON.
   */
  decode: function (json: string): AuthRequestRegistrationPayload {
    return AuthRequestRegistrationPayloadJSON._readMessage(
      AuthRequestRegistrationPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthRequestRegistrationPayload with all fields set to their default value.
   */
  initialize: function (): AuthRequestRegistrationPayload {
    return {
      email: "",
      title: "",
      password: "",
      sendEmail: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestRegistrationPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.sendEmail) {
      json["sendEmail"] = msg.sendEmail;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestRegistrationPayload,
    json: any,
  ): AuthRequestRegistrationPayload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _sendEmail_ = json["sendEmail"] ?? json["send_email"];
    if (_sendEmail_) {
      msg.sendEmail = _sendEmail_;
    }
    return msg;
  },
};

export const AuthRequestRegistrationResponseJSON = {
  /**
   * Serializes AuthRequestRegistrationResponse to JSON.
   */
  encode: function (msg: PartialDeep<AuthRequestRegistrationResponse>): string {
    return JSON.stringify(
      AuthRequestRegistrationResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthRequestRegistrationResponse from JSON.
   */
  decode: function (json: string): AuthRequestRegistrationResponse {
    return AuthRequestRegistrationResponseJSON._readMessage(
      AuthRequestRegistrationResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthRequestRegistrationResponse with all fields set to their default value.
   */
  initialize: function (): AuthRequestRegistrationResponse {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestRegistrationResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.approvalCode) {
      json["approvalCode"] = msg.approvalCode;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestRegistrationResponse,
    json: any,
  ): AuthRequestRegistrationResponse {
    const _approvalCode_ = json["approvalCode"] ?? json["approval_code"];
    if (_approvalCode_) {
      msg.approvalCode = _approvalCode_;
    }
    return msg;
  },
};

export const AuthApproveRegistrationPayloadJSON = {
  /**
   * Serializes AuthApproveRegistrationPayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthApproveRegistrationPayload>): string {
    return JSON.stringify(
      AuthApproveRegistrationPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthApproveRegistrationPayload from JSON.
   */
  decode: function (json: string): AuthApproveRegistrationPayload {
    return AuthApproveRegistrationPayloadJSON._readMessage(
      AuthApproveRegistrationPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthApproveRegistrationPayload with all fields set to their default value.
   */
  initialize: function (): AuthApproveRegistrationPayload {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveRegistrationPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.approvalCode) {
      json["approvalCode"] = msg.approvalCode;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveRegistrationPayload,
    json: any,
  ): AuthApproveRegistrationPayload {
    const _approvalCode_ = json["approvalCode"] ?? json["approval_code"];
    if (_approvalCode_) {
      msg.approvalCode = _approvalCode_;
    }
    return msg;
  },
};

export const AuthApproveRegistrationResponseJSON = {
  /**
   * Serializes AuthApproveRegistrationResponse to JSON.
   */
  encode: function (msg: PartialDeep<AuthApproveRegistrationResponse>): string {
    return JSON.stringify(
      AuthApproveRegistrationResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthApproveRegistrationResponse from JSON.
   */
  decode: function (json: string): AuthApproveRegistrationResponse {
    return AuthApproveRegistrationResponseJSON._readMessage(
      AuthApproveRegistrationResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthApproveRegistrationResponse with all fields set to their default value.
   */
  initialize: function (): AuthApproveRegistrationResponse {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveRegistrationResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveRegistrationResponse,
    json: any,
  ): AuthApproveRegistrationResponse {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const AuthAuthorizePayloadJSON = {
  /**
   * Serializes AuthAuthorizePayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthAuthorizePayload>): string {
    return JSON.stringify(AuthAuthorizePayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthAuthorizePayload from JSON.
   */
  decode: function (json: string): AuthAuthorizePayload {
    return AuthAuthorizePayloadJSON._readMessage(
      AuthAuthorizePayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthAuthorizePayload with all fields set to their default value.
   */
  initialize: function (): AuthAuthorizePayload {
    return {
      email: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthAuthorizePayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthAuthorizePayload,
    json: any,
  ): AuthAuthorizePayload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};

export const AuthAuthorizeResponseJSON = {
  /**
   * Serializes AuthAuthorizeResponse to JSON.
   */
  encode: function (msg: PartialDeep<AuthAuthorizeResponse>): string {
    return JSON.stringify(AuthAuthorizeResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthAuthorizeResponse from JSON.
   */
  decode: function (json: string): AuthAuthorizeResponse {
    return AuthAuthorizeResponseJSON._readMessage(
      AuthAuthorizeResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthAuthorizeResponse with all fields set to their default value.
   */
  initialize: function (): AuthAuthorizeResponse {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthAuthorizeResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthAuthorizeResponse,
    json: any,
  ): AuthAuthorizeResponse {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _authToken_ = json["authToken"] ?? json["auth_token"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const AuthQuickAuthorizePayloadJSON = {
  /**
   * Serializes AuthQuickAuthorizePayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthQuickAuthorizePayload>): string {
    return JSON.stringify(AuthQuickAuthorizePayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthQuickAuthorizePayload from JSON.
   */
  decode: function (json: string): AuthQuickAuthorizePayload {
    return AuthQuickAuthorizePayloadJSON._readMessage(
      AuthQuickAuthorizePayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthQuickAuthorizePayload with all fields set to their default value.
   */
  initialize: function (): AuthQuickAuthorizePayload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthQuickAuthorizePayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthQuickAuthorizePayload,
    json: any,
  ): AuthQuickAuthorizePayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _authToken_ = json["authToken"] ?? json["auth_token"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const AuthQuickAuthorizeResponseJSON = {
  /**
   * Serializes AuthQuickAuthorizeResponse to JSON.
   */
  encode: function (msg: PartialDeep<AuthQuickAuthorizeResponse>): string {
    return JSON.stringify(AuthQuickAuthorizeResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthQuickAuthorizeResponse from JSON.
   */
  decode: function (json: string): AuthQuickAuthorizeResponse {
    return AuthQuickAuthorizeResponseJSON._readMessage(
      AuthQuickAuthorizeResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthQuickAuthorizeResponse with all fields set to their default value.
   */
  initialize: function (): AuthQuickAuthorizeResponse {
    return {
      authSuccess: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthQuickAuthorizeResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.authSuccess) {
      json["authSuccess"] = msg.authSuccess;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthQuickAuthorizeResponse,
    json: any,
  ): AuthQuickAuthorizeResponse {
    const _authSuccess_ = json["authSuccess"] ?? json["auth_success"];
    if (_authSuccess_) {
      msg.authSuccess = _authSuccess_;
    }
    return msg;
  },
};

export const AuthMePayloadJSON = {
  /**
   * Serializes AuthMePayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthMePayload>): string {
    return JSON.stringify(AuthMePayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthMePayload from JSON.
   */
  decode: function (json: string): AuthMePayload {
    return AuthMePayloadJSON._readMessage(
      AuthMePayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthMePayload with all fields set to their default value.
   */
  initialize: function (): AuthMePayload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthMePayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AuthMePayload, json: any): AuthMePayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _authToken_ = json["authToken"] ?? json["auth_token"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const AuthMeResponseJSON = {
  /**
   * Serializes AuthMeResponse to JSON.
   */
  encode: function (msg: PartialDeep<AuthMeResponse>): string {
    return JSON.stringify(AuthMeResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthMeResponse from JSON.
   */
  decode: function (json: string): AuthMeResponse {
    return AuthMeResponseJSON._readMessage(
      AuthMeResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthMeResponse with all fields set to their default value.
   */
  initialize: function (): AuthMeResponse {
    return {
      personId: 0,
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
      title: "",
      groups: [],
      hasAvatar: false,
      lastUpdate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthMeResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.groups?.length) {
      json["groups"] = msg.groups;
    }
    if (msg.hasAvatar) {
      json["hasAvatar"] = msg.hasAvatar;
    }
    if (msg.lastUpdate) {
      json["lastUpdate"] = msg.lastUpdate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AuthMeResponse, json: any): AuthMeResponse {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _tenhouId_ = json["tenhouId"] ?? json["tenhou_id"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _groups_ = json["groups"];
    if (_groups_) {
      msg.groups = _groups_;
    }
    const _hasAvatar_ = json["hasAvatar"] ?? json["has_avatar"];
    if (_hasAvatar_) {
      msg.hasAvatar = _hasAvatar_;
    }
    const _lastUpdate_ = json["lastUpdate"] ?? json["last_update"];
    if (_lastUpdate_) {
      msg.lastUpdate = _lastUpdate_;
    }
    return msg;
  },
};

export const AuthChangePasswordPayloadJSON = {
  /**
   * Serializes AuthChangePasswordPayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthChangePasswordPayload>): string {
    return JSON.stringify(AuthChangePasswordPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthChangePasswordPayload from JSON.
   */
  decode: function (json: string): AuthChangePasswordPayload {
    return AuthChangePasswordPayloadJSON._readMessage(
      AuthChangePasswordPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthChangePasswordPayload with all fields set to their default value.
   */
  initialize: function (): AuthChangePasswordPayload {
    return {
      email: "",
      password: "",
      newPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthChangePasswordPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.newPassword) {
      json["newPassword"] = msg.newPassword;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthChangePasswordPayload,
    json: any,
  ): AuthChangePasswordPayload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _newPassword_ = json["newPassword"] ?? json["new_password"];
    if (_newPassword_) {
      msg.newPassword = _newPassword_;
    }
    return msg;
  },
};

export const AuthChangePasswordResponseJSON = {
  /**
   * Serializes AuthChangePasswordResponse to JSON.
   */
  encode: function (msg: PartialDeep<AuthChangePasswordResponse>): string {
    return JSON.stringify(AuthChangePasswordResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AuthChangePasswordResponse from JSON.
   */
  decode: function (json: string): AuthChangePasswordResponse {
    return AuthChangePasswordResponseJSON._readMessage(
      AuthChangePasswordResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthChangePasswordResponse with all fields set to their default value.
   */
  initialize: function (): AuthChangePasswordResponse {
    return {
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthChangePasswordResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthChangePasswordResponse,
    json: any,
  ): AuthChangePasswordResponse {
    const _authToken_ = json["authToken"] ?? json["auth_token"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const AuthRequestResetPasswordPayloadJSON = {
  /**
   * Serializes AuthRequestResetPasswordPayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthRequestResetPasswordPayload>): string {
    return JSON.stringify(
      AuthRequestResetPasswordPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthRequestResetPasswordPayload from JSON.
   */
  decode: function (json: string): AuthRequestResetPasswordPayload {
    return AuthRequestResetPasswordPayloadJSON._readMessage(
      AuthRequestResetPasswordPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthRequestResetPasswordPayload with all fields set to their default value.
   */
  initialize: function (): AuthRequestResetPasswordPayload {
    return {
      email: "",
      sendEmail: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestResetPasswordPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.sendEmail) {
      json["sendEmail"] = msg.sendEmail;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestResetPasswordPayload,
    json: any,
  ): AuthRequestResetPasswordPayload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _sendEmail_ = json["sendEmail"] ?? json["send_email"];
    if (_sendEmail_) {
      msg.sendEmail = _sendEmail_;
    }
    return msg;
  },
};

export const AuthRequestResetPasswordResponseJSON = {
  /**
   * Serializes AuthRequestResetPasswordResponse to JSON.
   */
  encode: function (
    msg: PartialDeep<AuthRequestResetPasswordResponse>,
  ): string {
    return JSON.stringify(
      AuthRequestResetPasswordResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthRequestResetPasswordResponse from JSON.
   */
  decode: function (json: string): AuthRequestResetPasswordResponse {
    return AuthRequestResetPasswordResponseJSON._readMessage(
      AuthRequestResetPasswordResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthRequestResetPasswordResponse with all fields set to their default value.
   */
  initialize: function (): AuthRequestResetPasswordResponse {
    return {
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthRequestResetPasswordResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.resetToken) {
      json["resetToken"] = msg.resetToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthRequestResetPasswordResponse,
    json: any,
  ): AuthRequestResetPasswordResponse {
    const _resetToken_ = json["resetToken"] ?? json["reset_token"];
    if (_resetToken_) {
      msg.resetToken = _resetToken_;
    }
    return msg;
  },
};

export const AuthApproveResetPasswordPayloadJSON = {
  /**
   * Serializes AuthApproveResetPasswordPayload to JSON.
   */
  encode: function (msg: PartialDeep<AuthApproveResetPasswordPayload>): string {
    return JSON.stringify(
      AuthApproveResetPasswordPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthApproveResetPasswordPayload from JSON.
   */
  decode: function (json: string): AuthApproveResetPasswordPayload {
    return AuthApproveResetPasswordPayloadJSON._readMessage(
      AuthApproveResetPasswordPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthApproveResetPasswordPayload with all fields set to their default value.
   */
  initialize: function (): AuthApproveResetPasswordPayload {
    return {
      email: "",
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveResetPasswordPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.resetToken) {
      json["resetToken"] = msg.resetToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveResetPasswordPayload,
    json: any,
  ): AuthApproveResetPasswordPayload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _resetToken_ = json["resetToken"] ?? json["reset_token"];
    if (_resetToken_) {
      msg.resetToken = _resetToken_;
    }
    return msg;
  },
};

export const AuthApproveResetPasswordResponseJSON = {
  /**
   * Serializes AuthApproveResetPasswordResponse to JSON.
   */
  encode: function (
    msg: PartialDeep<AuthApproveResetPasswordResponse>,
  ): string {
    return JSON.stringify(
      AuthApproveResetPasswordResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AuthApproveResetPasswordResponse from JSON.
   */
  decode: function (json: string): AuthApproveResetPasswordResponse {
    return AuthApproveResetPasswordResponseJSON._readMessage(
      AuthApproveResetPasswordResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AuthApproveResetPasswordResponse with all fields set to their default value.
   */
  initialize: function (): AuthApproveResetPasswordResponse {
    return {
      newTmpPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AuthApproveResetPasswordResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.newTmpPassword) {
      json["newTmpPassword"] = msg.newTmpPassword;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AuthApproveResetPasswordResponse,
    json: any,
  ): AuthApproveResetPasswordResponse {
    const _newTmpPassword_ = json["newTmpPassword"] ?? json["new_tmp_password"];
    if (_newTmpPassword_) {
      msg.newTmpPassword = _newTmpPassword_;
    }
    return msg;
  },
};

export const AccessGetAccessRulesPayloadJSON = {
  /**
   * Serializes AccessGetAccessRulesPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetAccessRulesPayload>): string {
    return JSON.stringify(AccessGetAccessRulesPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetAccessRulesPayload from JSON.
   */
  decode: function (json: string): AccessGetAccessRulesPayload {
    return AccessGetAccessRulesPayloadJSON._readMessage(
      AccessGetAccessRulesPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAccessRulesPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAccessRulesPayload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAccessRulesPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAccessRulesPayload,
    json: any,
  ): AccessGetAccessRulesPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessGetAccessRulesResponseJSON = {
  /**
   * Serializes AccessGetAccessRulesResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetAccessRulesResponse>): string {
    return JSON.stringify(AccessGetAccessRulesResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetAccessRulesResponse from JSON.
   */
  decode: function (json: string): AccessGetAccessRulesResponse {
    return AccessGetAccessRulesResponseJSON._readMessage(
      AccessGetAccessRulesResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAccessRulesResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAccessRulesResponse {
    return {
      rules: protoAtoms.AccessRulesJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAccessRulesResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = protoAtoms.AccessRulesJSON._writeMessage(msg.rules);
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAccessRulesResponse,
    json: any,
  ): AccessGetAccessRulesResponse {
    const _rules_ = json["rules"];
    if (_rules_) {
      protoAtoms.AccessRulesJSON._readMessage(msg.rules, _rules_);
    }
    return msg;
  },
};

export const AccessGetRuleValuePayloadJSON = {
  /**
   * Serializes AccessGetRuleValuePayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetRuleValuePayload>): string {
    return JSON.stringify(AccessGetRuleValuePayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetRuleValuePayload from JSON.
   */
  decode: function (json: string): AccessGetRuleValuePayload {
    return AccessGetRuleValuePayloadJSON._readMessage(
      AccessGetRuleValuePayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetRuleValuePayload with all fields set to their default value.
   */
  initialize: function (): AccessGetRuleValuePayload {
    return {
      personId: 0,
      eventId: 0,
      ruleName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetRuleValuePayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetRuleValuePayload,
    json: any,
  ): AccessGetRuleValuePayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    const _ruleName_ = json["ruleName"] ?? json["rule_name"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    return msg;
  },
};

export const AccessGetRuleValueResponseJSON = {
  /**
   * Serializes AccessGetRuleValueResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetRuleValueResponse>): string {
    return JSON.stringify(AccessGetRuleValueResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetRuleValueResponse from JSON.
   */
  decode: function (json: string): AccessGetRuleValueResponse {
    return AccessGetRuleValueResponseJSON._readMessage(
      AccessGetRuleValueResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetRuleValueResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetRuleValueResponse {
    return {
      value: protoAtoms.RuleValueJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetRuleValueResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      const _value_ = protoAtoms.RuleValueJSON._writeMessage(msg.value);
      if (Object.keys(_value_).length > 0) {
        json["value"] = _value_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetRuleValueResponse,
    json: any,
  ): AccessGetRuleValueResponse {
    const _value_ = json["value"];
    if (_value_) {
      protoAtoms.RuleValueJSON._readMessage(msg.value, _value_);
    }
    return msg;
  },
};

export const AccessGetEventAdminsPayloadJSON = {
  /**
   * Serializes AccessGetEventAdminsPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetEventAdminsPayload>): string {
    return JSON.stringify(AccessGetEventAdminsPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetEventAdminsPayload from JSON.
   */
  decode: function (json: string): AccessGetEventAdminsPayload {
    return AccessGetEventAdminsPayloadJSON._readMessage(
      AccessGetEventAdminsPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetEventAdminsPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetEventAdminsPayload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetEventAdminsPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetEventAdminsPayload,
    json: any,
  ): AccessGetEventAdminsPayload {
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessGetEventAdminsResponseJSON = {
  /**
   * Serializes AccessGetEventAdminsResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetEventAdminsResponse>): string {
    return JSON.stringify(AccessGetEventAdminsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetEventAdminsResponse from JSON.
   */
  decode: function (json: string): AccessGetEventAdminsResponse {
    return AccessGetEventAdminsResponseJSON._readMessage(
      AccessGetEventAdminsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetEventAdminsResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetEventAdminsResponse {
    return {
      admins: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetEventAdminsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.admins?.length) {
      json["admins"] = msg.admins.map(protoAtoms.EventAdminJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetEventAdminsResponse,
    json: any,
  ): AccessGetEventAdminsResponse {
    const _admins_ = json["admins"];
    if (_admins_) {
      for (const item of _admins_) {
        const m = protoAtoms.EventAdminJSON.initialize();
        protoAtoms.EventAdminJSON._readMessage(m, item);
        msg.admins.push(m);
      }
    }
    return msg;
  },
};

export const AccessGetSuperadminFlagPayloadJSON = {
  /**
   * Serializes AccessGetSuperadminFlagPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetSuperadminFlagPayload>): string {
    return JSON.stringify(
      AccessGetSuperadminFlagPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetSuperadminFlagPayload from JSON.
   */
  decode: function (json: string): AccessGetSuperadminFlagPayload {
    return AccessGetSuperadminFlagPayloadJSON._readMessage(
      AccessGetSuperadminFlagPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetSuperadminFlagPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetSuperadminFlagPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetSuperadminFlagPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetSuperadminFlagPayload,
    json: any,
  ): AccessGetSuperadminFlagPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const AccessGetSuperadminFlagResponseJSON = {
  /**
   * Serializes AccessGetSuperadminFlagResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetSuperadminFlagResponse>): string {
    return JSON.stringify(
      AccessGetSuperadminFlagResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetSuperadminFlagResponse from JSON.
   */
  decode: function (json: string): AccessGetSuperadminFlagResponse {
    return AccessGetSuperadminFlagResponseJSON._readMessage(
      AccessGetSuperadminFlagResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetSuperadminFlagResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetSuperadminFlagResponse {
    return {
      isAdmin: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetSuperadminFlagResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.isAdmin) {
      json["isAdmin"] = msg.isAdmin;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetSuperadminFlagResponse,
    json: any,
  ): AccessGetSuperadminFlagResponse {
    const _isAdmin_ = json["isAdmin"] ?? json["is_admin"];
    if (_isAdmin_) {
      msg.isAdmin = _isAdmin_;
    }
    return msg;
  },
};

export const AccessGetOwnedEventIdsPayloadJSON = {
  /**
   * Serializes AccessGetOwnedEventIdsPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetOwnedEventIdsPayload>): string {
    return JSON.stringify(AccessGetOwnedEventIdsPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetOwnedEventIdsPayload from JSON.
   */
  decode: function (json: string): AccessGetOwnedEventIdsPayload {
    return AccessGetOwnedEventIdsPayloadJSON._readMessage(
      AccessGetOwnedEventIdsPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetOwnedEventIdsPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetOwnedEventIdsPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetOwnedEventIdsPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetOwnedEventIdsPayload,
    json: any,
  ): AccessGetOwnedEventIdsPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const AccessGetOwnedEventIdsResponseJSON = {
  /**
   * Serializes AccessGetOwnedEventIdsResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetOwnedEventIdsResponse>): string {
    return JSON.stringify(
      AccessGetOwnedEventIdsResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetOwnedEventIdsResponse from JSON.
   */
  decode: function (json: string): AccessGetOwnedEventIdsResponse {
    return AccessGetOwnedEventIdsResponseJSON._readMessage(
      AccessGetOwnedEventIdsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetOwnedEventIdsResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetOwnedEventIdsResponse {
    return {
      eventIds: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetOwnedEventIdsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventIds?.length) {
      json["eventIds"] = msg.eventIds;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetOwnedEventIdsResponse,
    json: any,
  ): AccessGetOwnedEventIdsResponse {
    const _eventIds_ = json["eventIds"] ?? json["event_ids"];
    if (_eventIds_) {
      msg.eventIds = _eventIds_;
    }
    return msg;
  },
};

export const AccessGetRulesListPayloadJSON = {
  /**
   * Serializes AccessGetRulesListPayload to JSON.
   */
  encode: function (_msg?: PartialDeep<AccessGetRulesListPayload>): string {
    return "{}";
  },

  /**
   * Deserializes AccessGetRulesListPayload from JSON.
   */
  decode: function (_json?: string): AccessGetRulesListPayload {
    return {};
  },

  /**
   * Initializes AccessGetRulesListPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetRulesListPayload {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<AccessGetRulesListPayload>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetRulesListPayload,
    _json: any,
  ): AccessGetRulesListPayload {
    return msg;
  },
};

export const AccessGetRulesListResponseJSON = {
  /**
   * Serializes AccessGetRulesListResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetRulesListResponse>): string {
    return JSON.stringify(AccessGetRulesListResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetRulesListResponse from JSON.
   */
  decode: function (json: string): AccessGetRulesListResponse {
    return AccessGetRulesListResponseJSON._readMessage(
      AccessGetRulesListResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetRulesListResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetRulesListResponse {
    return {
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetRulesListResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.items?.length) {
      json["items"] = msg.items.map(protoAtoms.RuleListItemJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetRulesListResponse,
    json: any,
  ): AccessGetRulesListResponse {
    const _items_ = json["items"];
    if (_items_) {
      for (const item of _items_) {
        const m = protoAtoms.RuleListItemJSON.initialize();
        protoAtoms.RuleListItemJSON._readMessage(m, item);
        msg.items.push(m);
      }
    }
    return msg;
  },
};

export const AccessGetAllEventRulesPayloadJSON = {
  /**
   * Serializes AccessGetAllEventRulesPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetAllEventRulesPayload>): string {
    return JSON.stringify(AccessGetAllEventRulesPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetAllEventRulesPayload from JSON.
   */
  decode: function (json: string): AccessGetAllEventRulesPayload {
    return AccessGetAllEventRulesPayloadJSON._readMessage(
      AccessGetAllEventRulesPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAllEventRulesPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAllEventRulesPayload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllEventRulesPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllEventRulesPayload,
    json: any,
  ): AccessGetAllEventRulesPayload {
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessGetAllEventRulesResponseJSON = {
  /**
   * Serializes AccessGetAllEventRulesResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetAllEventRulesResponse>): string {
    return JSON.stringify(
      AccessGetAllEventRulesResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetAllEventRulesResponse from JSON.
   */
  decode: function (json: string): AccessGetAllEventRulesResponse {
    return AccessGetAllEventRulesResponseJSON._readMessage(
      AccessGetAllEventRulesResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAllEventRulesResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAllEventRulesResponse {
    return {
      personRules: [],
      groupRules: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllEventRulesResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personRules?.length) {
      json["personRules"] = msg.personRules.map(
        protoAtoms.EventRuleListItemJSON._writeMessage,
      );
    }
    if (msg.groupRules?.length) {
      json["groupRules"] = msg.groupRules.map(
        protoAtoms.EventRuleListItemJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllEventRulesResponse,
    json: any,
  ): AccessGetAllEventRulesResponse {
    const _personRules_ = json["personRules"] ?? json["person_rules"];
    if (_personRules_) {
      for (const item of _personRules_) {
        const m = protoAtoms.EventRuleListItemJSON.initialize();
        protoAtoms.EventRuleListItemJSON._readMessage(m, item);
        msg.personRules.push(m);
      }
    }
    const _groupRules_ = json["groupRules"] ?? json["group_rules"];
    if (_groupRules_) {
      for (const item of _groupRules_) {
        const m = protoAtoms.EventRuleListItemJSON.initialize();
        protoAtoms.EventRuleListItemJSON._readMessage(m, item);
        msg.groupRules.push(m);
      }
    }
    return msg;
  },
};

export const AccessGetPersonAccessPayloadJSON = {
  /**
   * Serializes AccessGetPersonAccessPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetPersonAccessPayload>): string {
    return JSON.stringify(AccessGetPersonAccessPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetPersonAccessPayload from JSON.
   */
  decode: function (json: string): AccessGetPersonAccessPayload {
    return AccessGetPersonAccessPayloadJSON._readMessage(
      AccessGetPersonAccessPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetPersonAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetPersonAccessPayload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetPersonAccessPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetPersonAccessPayload,
    json: any,
  ): AccessGetPersonAccessPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessGetPersonAccessResponseJSON = {
  /**
   * Serializes AccessGetPersonAccessResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetPersonAccessResponse>): string {
    return JSON.stringify(AccessGetPersonAccessResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetPersonAccessResponse from JSON.
   */
  decode: function (json: string): AccessGetPersonAccessResponse {
    return AccessGetPersonAccessResponseJSON._readMessage(
      AccessGetPersonAccessResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetPersonAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetPersonAccessResponse {
    return {
      rules: protoAtoms.AccessRulesJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetPersonAccessResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = protoAtoms.AccessRulesJSON._writeMessage(msg.rules);
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetPersonAccessResponse,
    json: any,
  ): AccessGetPersonAccessResponse {
    const _rules_ = json["rules"];
    if (_rules_) {
      protoAtoms.AccessRulesJSON._readMessage(msg.rules, _rules_);
    }
    return msg;
  },
};

export const AccessGetGroupAccessPayloadJSON = {
  /**
   * Serializes AccessGetGroupAccessPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetGroupAccessPayload>): string {
    return JSON.stringify(AccessGetGroupAccessPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetGroupAccessPayload from JSON.
   */
  decode: function (json: string): AccessGetGroupAccessPayload {
    return AccessGetGroupAccessPayloadJSON._readMessage(
      AccessGetGroupAccessPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetGroupAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetGroupAccessPayload {
    return {
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetGroupAccessPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetGroupAccessPayload,
    json: any,
  ): AccessGetGroupAccessPayload {
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessGetGroupAccessResponseJSON = {
  /**
   * Serializes AccessGetGroupAccessResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetGroupAccessResponse>): string {
    return JSON.stringify(AccessGetGroupAccessResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessGetGroupAccessResponse from JSON.
   */
  decode: function (json: string): AccessGetGroupAccessResponse {
    return AccessGetGroupAccessResponseJSON._readMessage(
      AccessGetGroupAccessResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetGroupAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetGroupAccessResponse {
    return {
      rules: protoAtoms.AccessRulesJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetGroupAccessResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = protoAtoms.AccessRulesJSON._writeMessage(msg.rules);
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetGroupAccessResponse,
    json: any,
  ): AccessGetGroupAccessResponse {
    const _rules_ = json["rules"];
    if (_rules_) {
      protoAtoms.AccessRulesJSON._readMessage(msg.rules, _rules_);
    }
    return msg;
  },
};

export const AccessGetAllPersonAccessPayloadJSON = {
  /**
   * Serializes AccessGetAllPersonAccessPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetAllPersonAccessPayload>): string {
    return JSON.stringify(
      AccessGetAllPersonAccessPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetAllPersonAccessPayload from JSON.
   */
  decode: function (json: string): AccessGetAllPersonAccessPayload {
    return AccessGetAllPersonAccessPayloadJSON._readMessage(
      AccessGetAllPersonAccessPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAllPersonAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAllPersonAccessPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllPersonAccessPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllPersonAccessPayload,
    json: any,
  ): AccessGetAllPersonAccessPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const AccessGetAllPersonAccessResponseJSON = {
  /**
   * Serializes AccessGetAllPersonAccessResponse to JSON.
   */
  encode: function (
    msg: PartialDeep<AccessGetAllPersonAccessResponse>,
  ): string {
    return JSON.stringify(
      AccessGetAllPersonAccessResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetAllPersonAccessResponse from JSON.
   */
  decode: function (json: string): AccessGetAllPersonAccessResponse {
    return AccessGetAllPersonAccessResponseJSON._readMessage(
      AccessGetAllPersonAccessResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAllPersonAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAllPersonAccessResponse {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllPersonAccessResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rulesByEvent) {
      const _rulesByEvent_ = Object.fromEntries(
        Object.entries(msg.rulesByEvent)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(AccessGetAllPersonAccessResponseJSON.RulesByEvent._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_rulesByEvent_).length > 0) {
        json["rulesByEvent"] = _rulesByEvent_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllPersonAccessResponse,
    json: any,
  ): AccessGetAllPersonAccessResponse {
    const _rulesByEvent_ = json["rulesByEvent"] ?? json["rules_by_event"];
    if (_rulesByEvent_) {
      msg.rulesByEvent = Object.fromEntries(
        Object.entries(_rulesByEvent_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(AccessGetAllPersonAccessResponseJSON.RulesByEvent._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<AccessGetAllPersonAccessResponse.RulesByEvent>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoAtoms.RuleListItemExMapJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: AccessGetAllPersonAccessResponse.RulesByEvent,
      json: any,
    ): AccessGetAllPersonAccessResponse.RulesByEvent {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        protoAtoms.RuleListItemExMapJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },
};

export const AccessGetAllGroupAccessPayloadJSON = {
  /**
   * Serializes AccessGetAllGroupAccessPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetAllGroupAccessPayload>): string {
    return JSON.stringify(
      AccessGetAllGroupAccessPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetAllGroupAccessPayload from JSON.
   */
  decode: function (json: string): AccessGetAllGroupAccessPayload {
    return AccessGetAllGroupAccessPayloadJSON._readMessage(
      AccessGetAllGroupAccessPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAllGroupAccessPayload with all fields set to their default value.
   */
  initialize: function (): AccessGetAllGroupAccessPayload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllGroupAccessPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllGroupAccessPayload,
    json: any,
  ): AccessGetAllGroupAccessPayload {
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const AccessGetAllGroupAccessResponseJSON = {
  /**
   * Serializes AccessGetAllGroupAccessResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessGetAllGroupAccessResponse>): string {
    return JSON.stringify(
      AccessGetAllGroupAccessResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessGetAllGroupAccessResponse from JSON.
   */
  decode: function (json: string): AccessGetAllGroupAccessResponse {
    return AccessGetAllGroupAccessResponseJSON._readMessage(
      AccessGetAllGroupAccessResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessGetAllGroupAccessResponse with all fields set to their default value.
   */
  initialize: function (): AccessGetAllGroupAccessResponse {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessGetAllGroupAccessResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rulesByEvent) {
      const _rulesByEvent_ = Object.fromEntries(
        Object.entries(msg.rulesByEvent)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(AccessGetAllGroupAccessResponseJSON.RulesByEvent._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_rulesByEvent_).length > 0) {
        json["rulesByEvent"] = _rulesByEvent_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessGetAllGroupAccessResponse,
    json: any,
  ): AccessGetAllGroupAccessResponse {
    const _rulesByEvent_ = json["rulesByEvent"] ?? json["rules_by_event"];
    if (_rulesByEvent_) {
      msg.rulesByEvent = Object.fromEntries(
        Object.entries(_rulesByEvent_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(AccessGetAllGroupAccessResponseJSON.RulesByEvent._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<AccessGetAllGroupAccessResponse.RulesByEvent>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoAtoms.RuleListItemExMapJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: AccessGetAllGroupAccessResponse.RulesByEvent,
      json: any,
    ): AccessGetAllGroupAccessResponse.RulesByEvent {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        protoAtoms.RuleListItemExMapJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },
};

export const AccessAddRuleForPersonPayloadJSON = {
  /**
   * Serializes AccessAddRuleForPersonPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessAddRuleForPersonPayload>): string {
    return JSON.stringify(AccessAddRuleForPersonPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessAddRuleForPersonPayload from JSON.
   */
  decode: function (json: string): AccessAddRuleForPersonPayload {
    return AccessAddRuleForPersonPayloadJSON._readMessage(
      AccessAddRuleForPersonPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForPersonPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValueJSON.initialize(),
      ruleType: "",
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForPersonPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = protoAtoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForPersonPayload,
    json: any,
  ): AccessAddRuleForPersonPayload {
    const _ruleName_ = json["ruleName"] ?? json["rule_name"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"] ?? json["rule_value"];
    if (_ruleValue_) {
      protoAtoms.RuleValueJSON._readMessage(msg.ruleValue, _ruleValue_);
    }
    const _ruleType_ = json["ruleType"] ?? json["rule_type"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessAddRuleForPersonResponseJSON = {
  /**
   * Serializes AccessAddRuleForPersonResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessAddRuleForPersonResponse>): string {
    return JSON.stringify(
      AccessAddRuleForPersonResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessAddRuleForPersonResponse from JSON.
   */
  decode: function (json: string): AccessAddRuleForPersonResponse {
    return AccessAddRuleForPersonResponseJSON._readMessage(
      AccessAddRuleForPersonResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddRuleForPersonResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForPersonResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForPersonResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForPersonResponse,
    json: any,
  ): AccessAddRuleForPersonResponse {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const AccessAddRuleForGroupPayloadJSON = {
  /**
   * Serializes AccessAddRuleForGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessAddRuleForGroupPayload>): string {
    return JSON.stringify(AccessAddRuleForGroupPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessAddRuleForGroupPayload from JSON.
   */
  decode: function (json: string): AccessAddRuleForGroupPayload {
    return AccessAddRuleForGroupPayloadJSON._readMessage(
      AccessAddRuleForGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForGroupPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValueJSON.initialize(),
      ruleType: "",
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = protoAtoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForGroupPayload,
    json: any,
  ): AccessAddRuleForGroupPayload {
    const _ruleName_ = json["ruleName"] ?? json["rule_name"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"] ?? json["rule_value"];
    if (_ruleValue_) {
      protoAtoms.RuleValueJSON._readMessage(msg.ruleValue, _ruleValue_);
    }
    const _ruleType_ = json["ruleType"] ?? json["rule_type"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessAddRuleForGroupResponseJSON = {
  /**
   * Serializes AccessAddRuleForGroupResponse to JSON.
   */
  encode: function (msg: PartialDeep<AccessAddRuleForGroupResponse>): string {
    return JSON.stringify(AccessAddRuleForGroupResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessAddRuleForGroupResponse from JSON.
   */
  decode: function (json: string): AccessAddRuleForGroupResponse {
    return AccessAddRuleForGroupResponseJSON._readMessage(
      AccessAddRuleForGroupResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddRuleForGroupResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddRuleForGroupResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddRuleForGroupResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddRuleForGroupResponse,
    json: any,
  ): AccessAddRuleForGroupResponse {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const AccessUpdateRuleForPersonPayloadJSON = {
  /**
   * Serializes AccessUpdateRuleForPersonPayload to JSON.
   */
  encode: function (
    msg: PartialDeep<AccessUpdateRuleForPersonPayload>,
  ): string {
    return JSON.stringify(
      AccessUpdateRuleForPersonPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessUpdateRuleForPersonPayload from JSON.
   */
  decode: function (json: string): AccessUpdateRuleForPersonPayload {
    return AccessUpdateRuleForPersonPayloadJSON._readMessage(
      AccessUpdateRuleForPersonPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessUpdateRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessUpdateRuleForPersonPayload {
    return {
      ruleId: 0,
      ruleValue: protoAtoms.RuleValueJSON.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessUpdateRuleForPersonPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = protoAtoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessUpdateRuleForPersonPayload,
    json: any,
  ): AccessUpdateRuleForPersonPayload {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    const _ruleValue_ = json["ruleValue"] ?? json["rule_value"];
    if (_ruleValue_) {
      protoAtoms.RuleValueJSON._readMessage(msg.ruleValue, _ruleValue_);
    }
    const _ruleType_ = json["ruleType"] ?? json["rule_type"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    return msg;
  },
};

export const AccessUpdateRuleForGroupPayloadJSON = {
  /**
   * Serializes AccessUpdateRuleForGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessUpdateRuleForGroupPayload>): string {
    return JSON.stringify(
      AccessUpdateRuleForGroupPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessUpdateRuleForGroupPayload from JSON.
   */
  decode: function (json: string): AccessUpdateRuleForGroupPayload {
    return AccessUpdateRuleForGroupPayloadJSON._readMessage(
      AccessUpdateRuleForGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessUpdateRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessUpdateRuleForGroupPayload {
    return {
      ruleId: 0,
      ruleValue: protoAtoms.RuleValueJSON.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessUpdateRuleForGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = protoAtoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessUpdateRuleForGroupPayload,
    json: any,
  ): AccessUpdateRuleForGroupPayload {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    const _ruleValue_ = json["ruleValue"] ?? json["rule_value"];
    if (_ruleValue_) {
      protoAtoms.RuleValueJSON._readMessage(msg.ruleValue, _ruleValue_);
    }
    const _ruleType_ = json["ruleType"] ?? json["rule_type"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    return msg;
  },
};

export const AccessDeleteRuleForPersonPayloadJSON = {
  /**
   * Serializes AccessDeleteRuleForPersonPayload to JSON.
   */
  encode: function (
    msg: PartialDeep<AccessDeleteRuleForPersonPayload>,
  ): string {
    return JSON.stringify(
      AccessDeleteRuleForPersonPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessDeleteRuleForPersonPayload from JSON.
   */
  decode: function (json: string): AccessDeleteRuleForPersonPayload {
    return AccessDeleteRuleForPersonPayloadJSON._readMessage(
      AccessDeleteRuleForPersonPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessDeleteRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessDeleteRuleForPersonPayload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessDeleteRuleForPersonPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessDeleteRuleForPersonPayload,
    json: any,
  ): AccessDeleteRuleForPersonPayload {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const AccessDeleteRuleForGroupPayloadJSON = {
  /**
   * Serializes AccessDeleteRuleForGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessDeleteRuleForGroupPayload>): string {
    return JSON.stringify(
      AccessDeleteRuleForGroupPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessDeleteRuleForGroupPayload from JSON.
   */
  decode: function (json: string): AccessDeleteRuleForGroupPayload {
    return AccessDeleteRuleForGroupPayloadJSON._readMessage(
      AccessDeleteRuleForGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessDeleteRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessDeleteRuleForGroupPayload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessDeleteRuleForGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessDeleteRuleForGroupPayload,
    json: any,
  ): AccessDeleteRuleForGroupPayload {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const AccessClearAccessCachePayloadJSON = {
  /**
   * Serializes AccessClearAccessCachePayload to JSON.
   */
  encode: function (msg: PartialDeep<AccessClearAccessCachePayload>): string {
    return JSON.stringify(AccessClearAccessCachePayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessClearAccessCachePayload from JSON.
   */
  decode: function (json: string): AccessClearAccessCachePayload {
    return AccessClearAccessCachePayloadJSON._readMessage(
      AccessClearAccessCachePayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessClearAccessCachePayload with all fields set to their default value.
   */
  initialize: function (): AccessClearAccessCachePayload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessClearAccessCachePayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessClearAccessCachePayload,
    json: any,
  ): AccessClearAccessCachePayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForPersonPayloadJSON = {
  /**
   * Serializes AccessAddSystemWideRuleForPersonPayload to JSON.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonPayload>,
  ): string {
    return JSON.stringify(
      AccessAddSystemWideRuleForPersonPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessAddSystemWideRuleForPersonPayload from JSON.
   */
  decode: function (json: string): AccessAddSystemWideRuleForPersonPayload {
    return AccessAddSystemWideRuleForPersonPayloadJSON._readMessage(
      AccessAddSystemWideRuleForPersonPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForPersonPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForPersonPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValueJSON.initialize(),
      ruleType: "",
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = protoAtoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForPersonPayload,
    json: any,
  ): AccessAddSystemWideRuleForPersonPayload {
    const _ruleName_ = json["ruleName"] ?? json["rule_name"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"] ?? json["rule_value"];
    if (_ruleValue_) {
      protoAtoms.RuleValueJSON._readMessage(msg.ruleValue, _ruleValue_);
    }
    const _ruleType_ = json["ruleType"] ?? json["rule_type"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForPersonResponseJSON = {
  /**
   * Serializes AccessAddSystemWideRuleForPersonResponse to JSON.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonResponse>,
  ): string {
    return JSON.stringify(
      AccessAddSystemWideRuleForPersonResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessAddSystemWideRuleForPersonResponse from JSON.
   */
  decode: function (json: string): AccessAddSystemWideRuleForPersonResponse {
    return AccessAddSystemWideRuleForPersonResponseJSON._readMessage(
      AccessAddSystemWideRuleForPersonResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForPersonResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForPersonResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForPersonResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForPersonResponse,
    json: any,
  ): AccessAddSystemWideRuleForPersonResponse {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForGroupPayloadJSON = {
  /**
   * Serializes AccessAddSystemWideRuleForGroupPayload to JSON.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupPayload>,
  ): string {
    return JSON.stringify(
      AccessAddSystemWideRuleForGroupPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessAddSystemWideRuleForGroupPayload from JSON.
   */
  decode: function (json: string): AccessAddSystemWideRuleForGroupPayload {
    return AccessAddSystemWideRuleForGroupPayloadJSON._readMessage(
      AccessAddSystemWideRuleForGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForGroupPayload with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForGroupPayload {
    return {
      ruleName: "",
      ruleValue: protoAtoms.RuleValueJSON.initialize(),
      ruleType: "",
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = protoAtoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForGroupPayload,
    json: any,
  ): AccessAddSystemWideRuleForGroupPayload {
    const _ruleName_ = json["ruleName"] ?? json["rule_name"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"] ?? json["rule_value"];
    if (_ruleValue_) {
      protoAtoms.RuleValueJSON._readMessage(msg.ruleValue, _ruleValue_);
    }
    const _ruleType_ = json["ruleType"] ?? json["rule_type"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const AccessAddSystemWideRuleForGroupResponseJSON = {
  /**
   * Serializes AccessAddSystemWideRuleForGroupResponse to JSON.
   */
  encode: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupResponse>,
  ): string {
    return JSON.stringify(
      AccessAddSystemWideRuleForGroupResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes AccessAddSystemWideRuleForGroupResponse from JSON.
   */
  decode: function (json: string): AccessAddSystemWideRuleForGroupResponse {
    return AccessAddSystemWideRuleForGroupResponseJSON._readMessage(
      AccessAddSystemWideRuleForGroupResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AccessAddSystemWideRuleForGroupResponse with all fields set to their default value.
   */
  initialize: function (): AccessAddSystemWideRuleForGroupResponse {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AccessAddSystemWideRuleForGroupResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AccessAddSystemWideRuleForGroupResponse,
    json: any,
  ): AccessAddSystemWideRuleForGroupResponse {
    const _ruleId_ = json["ruleId"] ?? json["rule_id"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const PersonsCreateAccountPayloadJSON = {
  /**
   * Serializes PersonsCreateAccountPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsCreateAccountPayload>): string {
    return JSON.stringify(PersonsCreateAccountPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsCreateAccountPayload from JSON.
   */
  decode: function (json: string): PersonsCreateAccountPayload {
    return PersonsCreateAccountPayloadJSON._readMessage(
      PersonsCreateAccountPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsCreateAccountPayload with all fields set to their default value.
   */
  initialize: function (): PersonsCreateAccountPayload {
    return {
      email: "",
      password: "",
      title: "",
      city: "",
      phone: "",
      tenhouId: "",
      country: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateAccountPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateAccountPayload,
    json: any,
  ): PersonsCreateAccountPayload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _tenhouId_ = json["tenhouId"] ?? json["tenhou_id"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    return msg;
  },
};

export const PersonsCreateAccountResponseJSON = {
  /**
   * Serializes PersonsCreateAccountResponse to JSON.
   */
  encode: function (msg: PartialDeep<PersonsCreateAccountResponse>): string {
    return JSON.stringify(PersonsCreateAccountResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsCreateAccountResponse from JSON.
   */
  decode: function (json: string): PersonsCreateAccountResponse {
    return PersonsCreateAccountResponseJSON._readMessage(
      PersonsCreateAccountResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsCreateAccountResponse with all fields set to their default value.
   */
  initialize: function (): PersonsCreateAccountResponse {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateAccountResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateAccountResponse,
    json: any,
  ): PersonsCreateAccountResponse {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const PersonsCreateGroupPayloadJSON = {
  /**
   * Serializes PersonsCreateGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsCreateGroupPayload>): string {
    return JSON.stringify(PersonsCreateGroupPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsCreateGroupPayload from JSON.
   */
  decode: function (json: string): PersonsCreateGroupPayload {
    return PersonsCreateGroupPayloadJSON._readMessage(
      PersonsCreateGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsCreateGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsCreateGroupPayload {
    return {
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.color) {
      json["color"] = msg.color;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateGroupPayload,
    json: any,
  ): PersonsCreateGroupPayload {
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _color_ = json["color"];
    if (_color_) {
      msg.color = _color_;
    }
    return msg;
  },
};

export const PersonsCreateGroupResponseJSON = {
  /**
   * Serializes PersonsCreateGroupResponse to JSON.
   */
  encode: function (msg: PartialDeep<PersonsCreateGroupResponse>): string {
    return JSON.stringify(PersonsCreateGroupResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsCreateGroupResponse from JSON.
   */
  decode: function (json: string): PersonsCreateGroupResponse {
    return PersonsCreateGroupResponseJSON._readMessage(
      PersonsCreateGroupResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsCreateGroupResponse with all fields set to their default value.
   */
  initialize: function (): PersonsCreateGroupResponse {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsCreateGroupResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsCreateGroupResponse,
    json: any,
  ): PersonsCreateGroupResponse {
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const PersonsUpdateGroupPayloadJSON = {
  /**
   * Serializes PersonsUpdateGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsUpdateGroupPayload>): string {
    return JSON.stringify(PersonsUpdateGroupPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsUpdateGroupPayload from JSON.
   */
  decode: function (json: string): PersonsUpdateGroupPayload {
    return PersonsUpdateGroupPayloadJSON._readMessage(
      PersonsUpdateGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsUpdateGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsUpdateGroupPayload {
    return {
      groupId: 0,
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsUpdateGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.color) {
      json["color"] = msg.color;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsUpdateGroupPayload,
    json: any,
  ): PersonsUpdateGroupPayload {
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _color_ = json["color"];
    if (_color_) {
      msg.color = _color_;
    }
    return msg;
  },
};

export const PersonsDeleteGroupPayloadJSON = {
  /**
   * Serializes PersonsDeleteGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsDeleteGroupPayload>): string {
    return JSON.stringify(PersonsDeleteGroupPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsDeleteGroupPayload from JSON.
   */
  decode: function (json: string): PersonsDeleteGroupPayload {
    return PersonsDeleteGroupPayloadJSON._readMessage(
      PersonsDeleteGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsDeleteGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsDeleteGroupPayload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsDeleteGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsDeleteGroupPayload,
    json: any,
  ): PersonsDeleteGroupPayload {
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const PersonsAddPersonToGroupPayloadJSON = {
  /**
   * Serializes PersonsAddPersonToGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsAddPersonToGroupPayload>): string {
    return JSON.stringify(
      PersonsAddPersonToGroupPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsAddPersonToGroupPayload from JSON.
   */
  decode: function (json: string): PersonsAddPersonToGroupPayload {
    return PersonsAddPersonToGroupPayloadJSON._readMessage(
      PersonsAddPersonToGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsAddPersonToGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsAddPersonToGroupPayload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsAddPersonToGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsAddPersonToGroupPayload,
    json: any,
  ): PersonsAddPersonToGroupPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const PersonsRemovePersonFromGroupPayloadJSON = {
  /**
   * Serializes PersonsRemovePersonFromGroupPayload to JSON.
   */
  encode: function (
    msg: PartialDeep<PersonsRemovePersonFromGroupPayload>,
  ): string {
    return JSON.stringify(
      PersonsRemovePersonFromGroupPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsRemovePersonFromGroupPayload from JSON.
   */
  decode: function (json: string): PersonsRemovePersonFromGroupPayload {
    return PersonsRemovePersonFromGroupPayloadJSON._readMessage(
      PersonsRemovePersonFromGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsRemovePersonFromGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsRemovePersonFromGroupPayload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsRemovePersonFromGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsRemovePersonFromGroupPayload,
    json: any,
  ): PersonsRemovePersonFromGroupPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const PersonsGetPersonsOfGroupPayloadJSON = {
  /**
   * Serializes PersonsGetPersonsOfGroupPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsGetPersonsOfGroupPayload>): string {
    return JSON.stringify(
      PersonsGetPersonsOfGroupPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsGetPersonsOfGroupPayload from JSON.
   */
  decode: function (json: string): PersonsGetPersonsOfGroupPayload {
    return PersonsGetPersonsOfGroupPayloadJSON._readMessage(
      PersonsGetPersonsOfGroupPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetPersonsOfGroupPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonsOfGroupPayload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonsOfGroupPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonsOfGroupPayload,
    json: any,
  ): PersonsGetPersonsOfGroupPayload {
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const PersonsGetPersonsOfGroupResponseJSON = {
  /**
   * Serializes PersonsGetPersonsOfGroupResponse to JSON.
   */
  encode: function (
    msg: PartialDeep<PersonsGetPersonsOfGroupResponse>,
  ): string {
    return JSON.stringify(
      PersonsGetPersonsOfGroupResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsGetPersonsOfGroupResponse from JSON.
   */
  decode: function (json: string): PersonsGetPersonsOfGroupResponse {
    return PersonsGetPersonsOfGroupResponseJSON._readMessage(
      PersonsGetPersonsOfGroupResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetPersonsOfGroupResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonsOfGroupResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonsOfGroupResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.people?.length) {
      json["people"] = msg.people.map(protoAtoms.PersonJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonsOfGroupResponse,
    json: any,
  ): PersonsGetPersonsOfGroupResponse {
    const _people_ = json["people"];
    if (_people_) {
      for (const item of _people_) {
        const m = protoAtoms.PersonJSON.initialize();
        protoAtoms.PersonJSON._readMessage(m, item);
        msg.people.push(m);
      }
    }
    return msg;
  },
};

export const PersonsGetGroupsOfPersonPayloadJSON = {
  /**
   * Serializes PersonsGetGroupsOfPersonPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsGetGroupsOfPersonPayload>): string {
    return JSON.stringify(
      PersonsGetGroupsOfPersonPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsGetGroupsOfPersonPayload from JSON.
   */
  decode: function (json: string): PersonsGetGroupsOfPersonPayload {
    return PersonsGetGroupsOfPersonPayloadJSON._readMessage(
      PersonsGetGroupsOfPersonPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetGroupsOfPersonPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsOfPersonPayload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsOfPersonPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsOfPersonPayload,
    json: any,
  ): PersonsGetGroupsOfPersonPayload {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const PersonsGetGroupsOfPersonResponseJSON = {
  /**
   * Serializes PersonsGetGroupsOfPersonResponse to JSON.
   */
  encode: function (
    msg: PartialDeep<PersonsGetGroupsOfPersonResponse>,
  ): string {
    return JSON.stringify(
      PersonsGetGroupsOfPersonResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsGetGroupsOfPersonResponse from JSON.
   */
  decode: function (json: string): PersonsGetGroupsOfPersonResponse {
    return PersonsGetGroupsOfPersonResponseJSON._readMessage(
      PersonsGetGroupsOfPersonResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetGroupsOfPersonResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsOfPersonResponse {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsOfPersonResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groups?.length) {
      json["groups"] = msg.groups.map(protoAtoms.GroupJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsOfPersonResponse,
    json: any,
  ): PersonsGetGroupsOfPersonResponse {
    const _groups_ = json["groups"];
    if (_groups_) {
      for (const item of _groups_) {
        const m = protoAtoms.GroupJSON.initialize();
        protoAtoms.GroupJSON._readMessage(m, item);
        msg.groups.push(m);
      }
    }
    return msg;
  },
};

export const PersonsUpdatePersonalInfoPayloadJSON = {
  /**
   * Serializes PersonsUpdatePersonalInfoPayload to JSON.
   */
  encode: function (
    msg: PartialDeep<PersonsUpdatePersonalInfoPayload>,
  ): string {
    return JSON.stringify(
      PersonsUpdatePersonalInfoPayloadJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsUpdatePersonalInfoPayload from JSON.
   */
  decode: function (json: string): PersonsUpdatePersonalInfoPayload {
    return PersonsUpdatePersonalInfoPayloadJSON._readMessage(
      PersonsUpdatePersonalInfoPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsUpdatePersonalInfoPayload with all fields set to their default value.
   */
  initialize: function (): PersonsUpdatePersonalInfoPayload {
    return {
      id: 0,
      title: "",
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
      hasAvatar: false,
      avatarData: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsUpdatePersonalInfoPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.hasAvatar) {
      json["hasAvatar"] = msg.hasAvatar;
    }
    if (msg.avatarData) {
      json["avatarData"] = msg.avatarData;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsUpdatePersonalInfoPayload,
    json: any,
  ): PersonsUpdatePersonalInfoPayload {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _tenhouId_ = json["tenhouId"] ?? json["tenhou_id"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _hasAvatar_ = json["hasAvatar"] ?? json["has_avatar"];
    if (_hasAvatar_) {
      msg.hasAvatar = _hasAvatar_;
    }
    const _avatarData_ = json["avatarData"] ?? json["avatar_data"];
    if (_avatarData_) {
      msg.avatarData = _avatarData_;
    }
    return msg;
  },
};

export const PersonsGetPersonalInfoPayloadJSON = {
  /**
   * Serializes PersonsGetPersonalInfoPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsGetPersonalInfoPayload>): string {
    return JSON.stringify(PersonsGetPersonalInfoPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsGetPersonalInfoPayload from JSON.
   */
  decode: function (json: string): PersonsGetPersonalInfoPayload {
    return PersonsGetPersonalInfoPayloadJSON._readMessage(
      PersonsGetPersonalInfoPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetPersonalInfoPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonalInfoPayload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonalInfoPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ids?.length) {
      json["ids"] = msg.ids;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonalInfoPayload,
    json: any,
  ): PersonsGetPersonalInfoPayload {
    const _ids_ = json["ids"];
    if (_ids_) {
      msg.ids = _ids_;
    }
    return msg;
  },
};

export const PersonsGetPersonalInfoResponseJSON = {
  /**
   * Serializes PersonsGetPersonalInfoResponse to JSON.
   */
  encode: function (msg: PartialDeep<PersonsGetPersonalInfoResponse>): string {
    return JSON.stringify(
      PersonsGetPersonalInfoResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsGetPersonalInfoResponse from JSON.
   */
  decode: function (json: string): PersonsGetPersonalInfoResponse {
    return PersonsGetPersonalInfoResponseJSON._readMessage(
      PersonsGetPersonalInfoResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetPersonalInfoResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetPersonalInfoResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetPersonalInfoResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.people?.length) {
      json["people"] = msg.people.map(protoAtoms.PersonExJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetPersonalInfoResponse,
    json: any,
  ): PersonsGetPersonalInfoResponse {
    const _people_ = json["people"];
    if (_people_) {
      for (const item of _people_) {
        const m = protoAtoms.PersonExJSON.initialize();
        protoAtoms.PersonExJSON._readMessage(m, item);
        msg.people.push(m);
      }
    }
    return msg;
  },
};

export const PersonsFindByTenhouIdsPayloadJSON = {
  /**
   * Serializes PersonsFindByTenhouIdsPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsFindByTenhouIdsPayload>): string {
    return JSON.stringify(PersonsFindByTenhouIdsPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsFindByTenhouIdsPayload from JSON.
   */
  decode: function (json: string): PersonsFindByTenhouIdsPayload {
    return PersonsFindByTenhouIdsPayloadJSON._readMessage(
      PersonsFindByTenhouIdsPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsFindByTenhouIdsPayload with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTenhouIdsPayload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTenhouIdsPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ids?.length) {
      json["ids"] = msg.ids;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTenhouIdsPayload,
    json: any,
  ): PersonsFindByTenhouIdsPayload {
    const _ids_ = json["ids"];
    if (_ids_) {
      msg.ids = _ids_;
    }
    return msg;
  },
};

export const PersonsFindByTenhouIdsResponseJSON = {
  /**
   * Serializes PersonsFindByTenhouIdsResponse to JSON.
   */
  encode: function (msg: PartialDeep<PersonsFindByTenhouIdsResponse>): string {
    return JSON.stringify(
      PersonsFindByTenhouIdsResponseJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes PersonsFindByTenhouIdsResponse from JSON.
   */
  decode: function (json: string): PersonsFindByTenhouIdsResponse {
    return PersonsFindByTenhouIdsResponseJSON._readMessage(
      PersonsFindByTenhouIdsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsFindByTenhouIdsResponse with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTenhouIdsResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTenhouIdsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.people?.length) {
      json["people"] = msg.people.map(protoAtoms.PersonExJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTenhouIdsResponse,
    json: any,
  ): PersonsFindByTenhouIdsResponse {
    const _people_ = json["people"];
    if (_people_) {
      for (const item of _people_) {
        const m = protoAtoms.PersonExJSON.initialize();
        protoAtoms.PersonExJSON._readMessage(m, item);
        msg.people.push(m);
      }
    }
    return msg;
  },
};

export const PersonsFindByTitlePayloadJSON = {
  /**
   * Serializes PersonsFindByTitlePayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsFindByTitlePayload>): string {
    return JSON.stringify(PersonsFindByTitlePayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsFindByTitlePayload from JSON.
   */
  decode: function (json: string): PersonsFindByTitlePayload {
    return PersonsFindByTitlePayloadJSON._readMessage(
      PersonsFindByTitlePayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsFindByTitlePayload with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTitlePayload {
    return {
      query: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTitlePayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.query) {
      json["query"] = msg.query;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTitlePayload,
    json: any,
  ): PersonsFindByTitlePayload {
    const _query_ = json["query"];
    if (_query_) {
      msg.query = _query_;
    }
    return msg;
  },
};

export const PersonsFindByTitleResponseJSON = {
  /**
   * Serializes PersonsFindByTitleResponse to JSON.
   */
  encode: function (msg: PartialDeep<PersonsFindByTitleResponse>): string {
    return JSON.stringify(PersonsFindByTitleResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsFindByTitleResponse from JSON.
   */
  decode: function (json: string): PersonsFindByTitleResponse {
    return PersonsFindByTitleResponseJSON._readMessage(
      PersonsFindByTitleResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsFindByTitleResponse with all fields set to their default value.
   */
  initialize: function (): PersonsFindByTitleResponse {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsFindByTitleResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.people?.length) {
      json["people"] = msg.people.map(protoAtoms.PersonJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsFindByTitleResponse,
    json: any,
  ): PersonsFindByTitleResponse {
    const _people_ = json["people"];
    if (_people_) {
      for (const item of _people_) {
        const m = protoAtoms.PersonJSON.initialize();
        protoAtoms.PersonJSON._readMessage(m, item);
        msg.people.push(m);
      }
    }
    return msg;
  },
};

export const PersonsGetGroupsPayloadJSON = {
  /**
   * Serializes PersonsGetGroupsPayload to JSON.
   */
  encode: function (msg: PartialDeep<PersonsGetGroupsPayload>): string {
    return JSON.stringify(PersonsGetGroupsPayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsGetGroupsPayload from JSON.
   */
  decode: function (json: string): PersonsGetGroupsPayload {
    return PersonsGetGroupsPayloadJSON._readMessage(
      PersonsGetGroupsPayloadJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetGroupsPayload with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsPayload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsPayload>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ids?.length) {
      json["ids"] = msg.ids;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsPayload,
    json: any,
  ): PersonsGetGroupsPayload {
    const _ids_ = json["ids"];
    if (_ids_) {
      msg.ids = _ids_;
    }
    return msg;
  },
};

export const PersonsGetGroupsResponseJSON = {
  /**
   * Serializes PersonsGetGroupsResponse to JSON.
   */
  encode: function (msg: PartialDeep<PersonsGetGroupsResponse>): string {
    return JSON.stringify(PersonsGetGroupsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonsGetGroupsResponse from JSON.
   */
  decode: function (json: string): PersonsGetGroupsResponse {
    return PersonsGetGroupsResponseJSON._readMessage(
      PersonsGetGroupsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PersonsGetGroupsResponse with all fields set to their default value.
   */
  initialize: function (): PersonsGetGroupsResponse {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PersonsGetGroupsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groups?.length) {
      json["groups"] = msg.groups.map(protoAtoms.GroupJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PersonsGetGroupsResponse,
    json: any,
  ): PersonsGetGroupsResponse {
    const _groups_ = json["groups"];
    if (_groups_) {
      for (const item of _groups_) {
        const m = protoAtoms.GroupJSON.initialize();
        protoAtoms.GroupJSON._readMessage(m, item);
        msg.groups.push(m);
      }
    }
    return msg;
  },
};

export const DepersonalizePayloadJSON = {
  /**
   * Serializes DepersonalizePayload to JSON.
   */
  encode: function (_msg?: PartialDeep<DepersonalizePayload>): string {
    return "{}";
  },

  /**
   * Deserializes DepersonalizePayload from JSON.
   */
  decode: function (_json?: string): DepersonalizePayload {
    return {};
  },

  /**
   * Initializes DepersonalizePayload with all fields set to their default value.
   */
  initialize: function (): DepersonalizePayload {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<DepersonalizePayload>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DepersonalizePayload,
    _json: any,
  ): DepersonalizePayload {
    return msg;
  },
};
